/**
 * VERIFICA√á√ÉO P√ìS-CORRE√á√ÉO ORPHANET
 * ==================================
 * Script para verificar se a corre√ß√£o funcionou
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function verificarCorrecao() {
    try {
        console.log('üîç VERIFICANDO CORRE√á√ÉO ORPHANET');
        console.log('==================================');

        const [
            totalDiseases,
            totalPhenotypes,
            totalEpidemiology,
            totalClinicalSigns,
            totalGenes,
            totalSummaries,
            totalManagement
        ] = await Promise.all([
            prisma.rareDisease.count(),
            prisma.diseasePhenotype.count(),
            prisma.diseaseEpidemiology.count(),
            prisma.diseaseClinicalSign.count(),
            prisma.diseaseGene.count(),
            prisma.diseaseSummary.count(),
            prisma.diseaseManagement.count()
        ]);

        console.log('üìä CONTAGENS ATUAIS:');
        console.log(`   ü¶† Doen√ßas totais: ${totalDiseases.toLocaleString()}`);
        console.log(`   üìä Fen√≥tipos: ${totalPhenotypes.toLocaleString()}`);
        console.log(`   üìä Epidemiologia: ${totalEpidemiology.toLocaleString()}`);
        console.log(`   üìä Sinais cl√≠nicos: ${totalClinicalSigns.toLocaleString()}`);
        console.log(`   üß¨ Genes: ${totalGenes.toLocaleString()}`);
        console.log(`   üìÑ Resumos: ${totalSummaries.toLocaleString()}`);
        console.log(`   üè• Manejo: ${totalManagement.toLocaleString()}`);

        const totalDados = totalPhenotypes + totalEpidemiology + totalClinicalSigns + totalGenes + totalSummaries + totalManagement;
        console.log(`   üìà TOTAL DADOS ORPHANET: ${totalDados.toLocaleString()}`);

        // Verificar algumas amostras
        console.log('\nüîç AMOSTRAS DE DADOS:');
        
        const phenotypeSample = await prisma.diseasePhenotype.findFirst({
            include: { disease: { select: { name: true } } }
        });
        
        if (phenotypeSample) {
            console.log(`   üìä Fen√≥tipo exemplo: ${phenotypeSample.phenotype} (${phenotypeSample.disease.name})`);
        }

        const epidemiologySample = await prisma.diseaseEpidemiology.findFirst({
            include: { disease: { select: { name: true } } }
        });
        
        if (epidemiologySample) {
            console.log(`   üìä Epidemiologia exemplo: ${epidemiologySample.type} - ${epidemiologySample.value}`);
        }

        // Status final
        console.log('\nüéØ STATUS DA CORRE√á√ÉO:');
        if (totalDados > 50000) {
            console.log('‚úÖ SUCESSO COMPLETO - Dados massivos carregados!');
        } else if (totalDados > 10000) {
            console.log('‚ö†Ô∏è SUCESSO PARCIAL - Alguns dados carregados');
        } else if (totalDados > 0) {
            console.log('üîÑ SUCESSO M√çNIMO - Poucos dados carregados');
        } else {
            console.log('‚ùå FALHA - Nenhum dado carregado');
        }

        console.log('\n==================================');
        
        return totalDados;

    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o:', error.message);
        return 0;
    } finally {
        await prisma.$disconnect();
    }
}

// Executar
if (require.main === module) {
    verificarCorrecao()
        .then((total) => {
            console.log(`\nüìä Total final: ${total.toLocaleString()} registros`);
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå ERRO:', error.message);
            process.exit(1);
        });
}

module.exports = verificarCorrecao;
