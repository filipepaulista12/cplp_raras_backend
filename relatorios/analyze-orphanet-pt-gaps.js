// AN√ÅLISE COMPLETA DO BANCO ORPHANET - CAMPOS PT VAZIOS
// =====================================================
// Identifica exatamente quais campos PT est√£o null e precisa popular

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const prisma = new PrismaClient();

async function analyzeOrphanetData() {
    console.log('üîç AN√ÅLISE COMPLETA - CAMPOS PT VAZIOS NO ORPHANET');
    console.log('================================================\n');

    try {
        // 1. An√°lise da tabela principal OrphaDisease
        console.log('üß¨ TABELA ORPHA_DISEASES:');
        console.log('=======================');
        
        const totalDiseases = await prisma.orphaDisease.count();
        console.log(`üìä Total de doen√ßas: ${totalDiseases.toLocaleString()}`);
        
        // Contar campos PT vazios
        const nullPreferredNamePt = await prisma.orphaDisease.count({
            where: { preferredNamePt: null }
        });
        
        const nullSynonymsPt = await prisma.orphaDisease.count({
            where: { synonymsPt: null }
        });
        
        const nullDefinitionEn = await prisma.orphaDisease.count({
            where: { definitionEn: null }
        });
        
        const nullDefinitionPt = await prisma.orphaDisease.count({
            where: { definitionPt: null }
        });
        
        console.log(`‚ùå preferredNamePt NULL: ${nullPreferredNamePt.toLocaleString()} (${((nullPreferredNamePt/totalDiseases)*100).toFixed(1)}%)`);
        console.log(`‚ùå synonymsPt NULL: ${nullSynonymsPt.toLocaleString()} (${((nullSynonymsPt/totalDiseases)*100).toFixed(1)}%)`);
        console.log(`‚ùå definitionEn NULL: ${nullDefinitionEn.toLocaleString()} (${((nullDefinitionEn/totalDiseases)*100).toFixed(1)}%)`);
        console.log(`‚ùå definitionPt NULL: ${nullDefinitionPt.toLocaleString()} (${((nullDefinitionPt/totalDiseases)*100).toFixed(1)}%)`);
        
        // Exemplos com dados PT
        const withPtData = await prisma.orphaDisease.findMany({
            where: { 
                preferredNamePt: { not: null }
            },
            take: 5
        });
        
        console.log('\n‚úÖ EXEMPLOS COM DADOS PT:');
        withPtData.forEach(d => {
            console.log(`   - ${d.orphaNumber}: ${d.preferredNameEn} ‚Üí ${d.preferredNamePt}`);
        });
        
        // Exemplos sem dados PT
        const withoutPtData = await prisma.orphaDisease.findMany({
            where: { 
                preferredNamePt: null
            },
            take: 5
        });
        
        console.log('\n‚ùå EXEMPLOS SEM DADOS PT:');
        withoutPtData.forEach(d => {
            console.log(`   - ${d.orphaNumber}: ${d.preferredNameEn} ‚Üí NULL`);
        });
        
        // 2. An√°lise HPO Terms
        console.log('\nüî¨ TABELA HPO_TERMS:');
        console.log('==================');
        
        const totalHpo = await prisma.hPOTerm.count();
        console.log(`üìä Total de termos HPO: ${totalHpo.toLocaleString()}`);
        
        const nullHpoNamePt = await prisma.hPOTerm.count({
            where: { namePt: null }
        });
        
        const nullHpoDefinitionPt = await prisma.hPOTerm.count({
            where: { definitionPt: null }
        });
        
        console.log(`‚ùå namePt NULL: ${nullHpoNamePt.toLocaleString()} (${((nullHpoNamePt/totalHpo)*100).toFixed(1)}%)`);
        console.log(`‚ùå definitionPt NULL: ${nullHpoDefinitionPt.toLocaleString()} (${((nullHpoDefinitionPt/totalHpo)*100).toFixed(1)}%)`);
        
        // 3. An√°lise tabelas relacionadas
        console.log('\nüìã TABELAS RELACIONADAS:');
        console.log('======================');
        
        const mappingsCount = await prisma.orphaExternalMapping.count();
        const nullSourceNamePt = await prisma.orphaExternalMapping.count({
            where: { sourceNamePt: null }
        });
        console.log(`üîó ExternalMappings: ${mappingsCount} total, ${nullSourceNamePt} sem sourceNamePt`);
        
        const classificationsCount = await prisma.orphaMedicalClassification.count();
        const nullMedSpecialtyPt = await prisma.orphaMedicalClassification.count({
            where: { medicalSpecialtyPt: null }
        });
        console.log(`üè• MedicalClassifications: ${classificationsCount} total, ${nullMedSpecialtyPt} sem medicalSpecialtyPt`);
        
        const genesCount = await prisma.orphaGeneAssociation.count();
        const nullGeneNamePt = await prisma.orphaGeneAssociation.count({
            where: { geneNamePt: null }
        });
        console.log(`üß¨ GeneAssociations: ${genesCount} total, ${nullGeneNamePt} sem geneNamePt`);
        
        const naturalHistoryCount = await prisma.orphaNaturalHistory.count();
        const nullPrognosisPt = await prisma.orphaNaturalHistory.count({
            where: { prognosisPt: null }
        });
        console.log(`üìà NaturalHistory: ${naturalHistoryCount} total, ${nullPrognosisPt} sem prognosisPt`);
        
        const epidemiologyCount = await prisma.orphaEpidemiology.count();
        const nullPopDescPt = await prisma.orphaEpidemiology.count({
            where: { populationDescriptionPt: null }
        });
        console.log(`üìä Epidemiology: ${epidemiologyCount} total, ${nullPopDescPt} sem populationDescriptionPt`);
        
        const textualInfoCount = await prisma.orphaTextualInformation.count();
        const nullTextPt = await prisma.orphaTextualInformation.count({
            where: { textPt: null }
        });
        console.log(`üìù TextualInformation: ${textualInfoCount} total, ${nullTextPt} sem textPt`);
        
        // 4. Verificar arquivo JSON de refer√™ncia
        console.log('\nüìÅ ARQUIVO JSON DE REFER√äNCIA:');
        console.log('=============================');
        
        const jsonFile = './src/data/all-diseases-complete-official.json';
        if (fs.existsSync(jsonFile)) {
            const jsonData = JSON.parse(fs.readFileSync(jsonFile, 'utf8'));
            console.log(`‚úÖ Arquivo encontrado: ${jsonData.length.toLocaleString()} doen√ßas`);
            
            // Amostra do JSON
            const sample = jsonData[0];
            console.log('üìã Estrutura do JSON:');
            console.log(`   - orpha_code: ${sample.orpha_code}`);
            console.log(`   - name (PT): ${sample.name}`);
            console.log(`   - nameEn: ${sample.nameEn}`);
            console.log(`   - synonyms: ${sample.synonyms?.length || 0} itens`);
            console.log(`   - description: ${sample.description?.substring(0, 50)}...`);
            
            // Verificar correspond√™ncia com banco
            const orphaCodeSample = sample.orpha_code.replace('ORPHA:', '');
            const dbMatch = await prisma.orphaDisease.findFirst({
                where: { orphaCode: orphaCodeSample }
            });
            
            if (dbMatch) {
                console.log(`‚úÖ Correspond√™ncia encontrada no banco:`);
                console.log(`   - DB: ${dbMatch.preferredNameEn} ‚Üí ${dbMatch.preferredNamePt}`);
                console.log(`   - JSON: ${sample.nameEn} ‚Üí ${sample.name}`);
            } else {
                console.log(`‚ùå N√£o encontrou correspond√™ncia para ${sample.orpha_code}`);
            }
        } else {
            console.log('‚ùå Arquivo JSON n√£o encontrado');
        }
        
        console.log('\nüéØ RESUMO DA AN√ÅLISE:');
        console.log('==================');
        console.log(`üìä Total de registros analisados: ${(totalDiseases + totalHpo).toLocaleString()}`);
        console.log(`‚úÖ Temos arquivo JSON com ${jsonData.length.toLocaleString()} doen√ßas PT`);
        console.log(`üîß Precisa popular campos PT em OrphaDisease, HPO e tabelas relacionadas`);
        console.log(`üìÅ Arquivo JSON de refer√™ncia dispon√≠vel e compat√≠vel`);
        
    } catch (error) {
        console.error('‚ùå Erro na an√°lise:', error);
    } finally {
        await prisma.$disconnect();
    }
}

analyzeOrphanetData();
