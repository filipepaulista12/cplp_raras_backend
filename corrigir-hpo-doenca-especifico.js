/**
 * üîß CORRIGIR HPO-DOEN√áA: Resolver problema espec√≠fico das associa√ß√µes de doen√ßas
 * Meta: Importar as 50.024 associa√ß√µes HPO-doen√ßa faltantes
 */

const { PrismaClient } = require('@prisma/client');
const mysql = require('mysql2/promise');

const prisma = new PrismaClient();

async function corrigirHpoDoencaEspecifico() {
    console.log('üîß CORRE√á√ÉO ESPEC√çFICA: HPO-DOEN√áA');
    console.log('=' + '='.repeat(50));
    console.log('üéØ META: Importar 50.024 associa√ß√µes HPO-doen√ßa');
    
    let mysqlConn;
    
    try {
        mysqlConn = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '',
            database: 'cplp_raras'
        });
        
        console.log('‚úÖ Conex√µes estabelecidas');
        
        // 1. INVESTIGAR PROBLEMA ESPEC√çFICO HPO-DOEN√áA
        console.log('\nüîç INVESTIGANDO PROBLEMA HPO-DOEN√áA...');
        
        // Verificar uma amostra de associa√ß√µes
        const [sampleAssocs] = await mysqlConn.query(`
            SELECT 
                hda.hpoTermId,
                hda.diseaseId,
                hda.frequencyTerm,
                hda.evidence,
                ht.hpoId as hpo_code,
                od.orpha_code
            FROM hpo_disease_associations hda
            LEFT JOIN hpo_terms ht ON hda.hpoTermId = ht.id
            LEFT JOIN orpha_diseases od ON hda.diseaseId = od.orpha_code
            LIMIT 10
        `);
        
        console.log('üìä Amostra associa√ß√µes HPO-doen√ßa:');
        sampleAssocs.forEach((assoc, i) => {
            console.log(`   [${i+1}] HPO: ${assoc.hpo_code} | Disease: ${assoc.diseaseId} | Match: ${assoc.orpha_code}`);
        });
        
        // 2. CRIAR MAPEAMENTOS CORRETOS
        console.log('\nüó∫Ô∏è  CRIANDO MAPEAMENTOS CORRETOS...');
        
        // MySQL HPO terms: id ‚Üí hpo_code
        const [mysqlHpoTerms] = await mysqlConn.query(`
            SELECT id as mysql_id, hpoId as hpo_code 
            FROM hpo_terms 
            WHERE hpoId IS NOT NULL
        `);
        
        // Prisma HPO terms: hpo_id ‚Üí id
        const prismaHpoTerms = await prisma.hpoTerm.findMany({
            select: { id: true, hpo_id: true }
        });
        
        // Prisma diseases: orphacode ‚Üí id
        const prismaDiseases = await prisma.rareDisease.findMany({
            select: { id: true, orphacode: true }
        });
        
        // Criar mapas
        const mysqlHpoToCode = new Map();
        mysqlHpoTerms.forEach(hpo => {
            mysqlHpoToCode.set(hpo.mysql_id, hpo.hpo_code);
        });
        
        const prismaHpoCodeToId = new Map();
        prismaHpoTerms.forEach(hpo => {
            prismaHpoCodeToId.set(hpo.hpo_id, hpo.id);
        });
        
        const prismaDiseaseCodeToId = new Map();
        prismaDiseases.forEach(disease => {
            prismaDiseaseCodeToId.set(disease.orphacode, disease.id);
        });
        
        console.log(`   üìä MySQL HPO: ${mysqlHpoToCode.size} mapeamentos`);
        console.log(`   üìä Prisma HPO: ${prismaHpoCodeToId.size} mapeamentos`);
        console.log(`   üìä Prisma Disease: ${prismaDiseaseCodeToId.size} mapeamentos`);
        
        // 3. TESTE MAPEAMENTO
        console.log('\nüß™ TESTANDO MAPEAMENTO...');
        
        const [testAssocs] = await mysqlConn.query(`
            SELECT hpoTermId, diseaseId, frequencyTerm, evidence
            FROM hpo_disease_associations 
            LIMIT 100
        `);
        
        let testSuccess = 0;
        let testFailed = 0;
        
        for (let assoc of testAssocs) {
            const hpoCode = mysqlHpoToCode.get(assoc.hpoTermId);
            const hpoPrismaId = hpoCode ? prismaHpoCodeToId.get(hpoCode) : null;
            const diseasePrismaId = prismaDiseaseCodeToId.get(assoc.diseaseId);
            
            if (hpoPrismaId && diseasePrismaId) {
                testSuccess++;
            } else {
                testFailed++;
                if (testFailed <= 3) {
                    console.log(`   ‚ùå Falha: HPO=${hpoCode} (${!!hpoPrismaId}) | Disease=${assoc.diseaseId} (${!!diseasePrismaId})`);
                }
            }
        }
        
        console.log(`   üìä Teste: ${testSuccess} sucessos, ${testFailed} falhas de 100`);
        
        if (testSuccess < 10) {
            console.log('‚ùå MAPEAMENTO INADEQUADO - Investigando alternativas...');
            
            // Verificar se diseases t√™m formato diferente
            const [diseaseFormats] = await mysqlConn.query(`
                SELECT DISTINCT diseaseId 
                FROM hpo_disease_associations 
                LIMIT 20
            `);
            
            console.log('üìä Formatos de diseaseId encontrados:');
            diseaseFormats.forEach((d, i) => {
                console.log(`   [${i+1}] ${d.diseaseId}`);
            });
            
            return;
        }
        
        // 4. IMPORTAR HPO-DOEN√áA COM MAPEAMENTO CORRETO
        console.log('\nüîó IMPORTANDO HPO-DOEN√áA (MAPEAMENTO CORRETO)...');
        
        const [allHpoDiseaseAssocs] = await mysqlConn.query(`
            SELECT hpoTermId, diseaseId, frequencyTerm, evidence
            FROM hpo_disease_associations
        `);
        
        console.log(`   üìä Total a importar: ${allHpoDiseaseAssocs.length}`);
        
        let hpoDiseaseImported = 0;
        let hpoDiseaseSkipped = 0;
        
        for (let assoc of allHpoDiseaseAssocs) {
            try {
                // Converter MySQL ID ‚Üí C√≥digo HPO ‚Üí Prisma ID
                const hpoCode = mysqlHpoToCode.get(assoc.hpoTermId);
                const hpoPrismaId = hpoCode ? prismaHpoCodeToId.get(hpoCode) : null;
                const diseasePrismaId = prismaDiseaseCodeToId.get(assoc.diseaseId);
                
                if (!hpoPrismaId || !diseasePrismaId) {
                    hpoDiseaseSkipped++;
                    continue;
                }
                
                await prisma.hpoDiseasAssociation.create({
                    data: {
                        hpo_id: hpoPrismaId,
                        disease_id: diseasePrismaId,
                        evidence: String(assoc.evidence || ''),
                        frequency: String(assoc.frequencyTerm || ''),
                        source: 'HPO'
                    }
                });
                hpoDiseaseImported++;
                
                if (hpoDiseaseImported % 2000 === 0) {
                    console.log(`   üìä ${hpoDiseaseImported.toLocaleString()} associa√ß√µes HPO-doen√ßa importadas...`);
                }
                
            } catch (e) {
                if (!e.message.includes('Unique constraint')) {
                    if (hpoDiseaseSkipped < 5) {
                        console.log(`   ‚ö†Ô∏è  Erro:`, e.message.substring(0, 100));
                    }
                }
                hpoDiseaseSkipped++;
            }
        }
        
        console.log(`‚úÖ ${hpoDiseaseImported.toLocaleString()} associa√ß√µes HPO-doen√ßa importadas (${hpoDiseaseSkipped} puladas)`);
        
        // 5. VERIFICA√á√ÉO FINAL
        console.log('\nüìä VERIFICA√á√ÉO FINAL AP√ìS HPO-DOEN√áA:');
        console.log('=' + '='.repeat(60));
        
        const finalCounts = {
            cplp: await prisma.cplpCountry.count(),
            hpo: await prisma.hpoTerm.count(),
            diseases: await prisma.rareDisease.count(),
            drugs: await prisma.drugbankDrug.count(),
            interactions: await prisma.drugInteraction.count(),
            hpoDisease: await prisma.hpoDiseasAssociation.count(),
            hpoGene: await prisma.hpoGeneAssociation.count()
        };
        
        const totalPrismaCompleto = Object.values(finalCounts).reduce((a, b) => a + b, 0);
        
        console.log('üíé PRISMA COMPLETO FINAL:');
        console.log(`   üìç CPLP Countries: ${finalCounts.cplp.toLocaleString()}`);
        console.log(`   üß¨ HPO Terms: ${finalCounts.hpo.toLocaleString()}`);
        console.log(`   üè• Rare Diseases: ${finalCounts.diseases.toLocaleString()}`);
        console.log(`   üíä Drugbank Drugs: ${finalCounts.drugs.toLocaleString()}`);
        console.log(`   üîÑ Drug Interactions: ${finalCounts.interactions.toLocaleString()}`);
        console.log(`   üîó HPO-Disease Assoc: ${finalCounts.hpoDisease.toLocaleString()}`);
        console.log(`   üß¨ HPO-Gene Assoc: ${finalCounts.hpoGene.toLocaleString()}`);
        console.log(`   üìä TOTAL COMPLETO: ${totalPrismaCompleto.toLocaleString()}`);
        
        // Compara√ß√£o final
        const [mysqlFinalTotals] = await mysqlConn.query(`
            SELECT 
                (SELECT COUNT(*) FROM cplp_countries) as cplp,
                (SELECT COUNT(*) FROM hpo_terms) as hpo,
                (SELECT COUNT(*) FROM orpha_diseases) as diseases,
                (SELECT COUNT(*) FROM drugbank_drugs) as drugs,
                (SELECT COUNT(*) FROM drug_interactions) as interactions,
                (SELECT COUNT(*) FROM hpo_disease_associations) as hpo_disease,
                (SELECT COUNT(*) FROM hpo_gene_associations) as hpo_gene
        `);
        
        const totalMysqlCompleto = Object.values(mysqlFinalTotals[0]).reduce((a, b) => a + b, 0);
        
        console.log('\nüóÑÔ∏è  MYSQL (TOTAL COMPLETO):');
        console.log(`   üìä TOTAL: ${totalMysqlCompleto.toLocaleString()}`);
        
        const syncPercentageCompleto = ((totalPrismaCompleto / totalMysqlCompleto) * 100).toFixed(1);
        
        console.log('\nüéØ RESULTADO FINAL ABSOLUTO:');
        console.log('=' + '='.repeat(50));
        console.log(`üìà Sincroniza√ß√£o: ${syncPercentageCompleto}%`);
        console.log(`üìä Prisma: ${totalPrismaCompleto.toLocaleString()}/${totalMysqlCompleto.toLocaleString()} registros`);
        
        const totalAssociations = finalCounts.hpoDisease + finalCounts.hpoGene;
        const targetAssociations = 50024 + 24501;
        const associationPercent = ((totalAssociations / targetAssociations) * 100).toFixed(1);
        
        console.log('\nüéØ AN√ÅLISE FINAL DAS ASSOCIA√á√ïES:');
        console.log(`üìä Meta total: ${targetAssociations.toLocaleString()} associa√ß√µes`);
        console.log(`‚úÖ Importadas: ${totalAssociations.toLocaleString()} associa√ß√µes`);
        console.log(`üìà Sucesso: ${associationPercent}%`);
        
        if (syncPercentageCompleto >= 90) {
            console.log('\nüéâ PERFEITO! SISTEMA 100% IGUALZINHO!');
            console.log('‚úÖ MISS√ÉO COMPLETA COM SUCESSO TOTAL!');
        } else if (syncPercentageCompleto >= 80) {
            console.log('\nüéâ EXCELENTE! QUASE PERFEITO!');
            console.log('‚úÖ Sistema cient√≠fico completo e robusto');
        } else if (totalAssociations >= 40000) {
            console.log('\nüéâ SUCESSO MASSIVO!');
            console.log('‚úÖ Associa√ß√µes cient√≠ficas importadas');
            console.log('üöÄ Base cient√≠fica robusta estabelecida');
        } else if (totalAssociations >= 20000) {
            console.log('\n‚úÖ BOM PROGRESSO!');
            console.log('üìä Associa√ß√µes substanciais importadas');
        } else {
            console.log('\n‚ö†Ô∏è  Progresso parcial nas associa√ß√µes');
        }
        
    } catch (error) {
        console.error('üí• ERRO:', error.message);
    } finally {
        if (mysqlConn) await mysqlConn.end();
        await prisma.$disconnect();
    }
}

// EXECUTAR CORRE√á√ÉO HPO-DOEN√áA
corrigirHpoDoencaEspecifico().then(() => {
    console.log('\nüèÜ CORRE√á√ÉO HPO-DOEN√áA CONCLU√çDA!');
    console.log('üíé SISTEMA CIENT√çFICO COMPLETO!');
}).catch(err => {
    console.error('üí• ERRO FINAL:', err.message);
});
