/**
 * üîß FASE 0 - TAREFA 0.2: Verifica√ß√£o completa de sincroniza√ß√£o
 * üéØ OBJETIVO: Confirmar que todos os n√∫meros batem entre MySQL e SQLite
 * üìä META: Relat√≥rio detalhado tabela por tabela
 */

const { PrismaClient } = require('@prisma/client');
const mysql = require('mysql2/promise');

const prisma = new PrismaClient();

async function tarefa02_verificacaoCompletaSincronizacao() {
    console.log('üîß FASE 0 - TAREFA 0.2: VERIFICA√á√ÉO COMPLETA DE SINCRONIZA√á√ÉO');
    console.log('=' + '='.repeat(80));
    console.log('üéØ OBJETIVO: Confirmar n√∫meros entre MySQL e SQLite');
    console.log('üìä META: Relat√≥rio detalhado tabela por tabela');
    
    let mysqlConn;
    
    try {
        // 1. CONECTAR AO MYSQL
        mysqlConn = await mysql.createConnection({
            host: 'localhost',
            user: 'root', 
            password: '',
            database: 'cplp_raras'
        });
        
        console.log('‚úÖ Conex√£o MySQL estabelecida');
        
        // 2. CONTAGENS MYSQL
        console.log('\nüìä CONTANDO REGISTROS NO MYSQL...');
        
        const mysqlCounts = {};
        
        const [cplpCount] = await mysqlConn.query('SELECT COUNT(*) as count FROM cplp_countries');
        mysqlCounts.cplp_countries = cplpCount[0].count;
        
        const [hpoCount] = await mysqlConn.query('SELECT COUNT(*) as count FROM hpo_terms');
        mysqlCounts.hpo_terms = hpoCount[0].count;
        
        const [diseaseCount] = await mysqlConn.query('SELECT COUNT(*) as count FROM orpha_diseases');
        mysqlCounts.orpha_diseases = diseaseCount[0].count;
        
        const [drugCount] = await mysqlConn.query('SELECT COUNT(*) as count FROM drugbank_drugs');
        mysqlCounts.drugbank_drugs = drugCount[0].count;
        
        const [interactionCount] = await mysqlConn.query('SELECT COUNT(*) as count FROM drug_interactions');
        mysqlCounts.drug_interactions = interactionCount[0].count;
        
        const [hpoDiseaseCount] = await mysqlConn.query('SELECT COUNT(*) as count FROM hpo_disease_associations');
        mysqlCounts.hpo_disease_associations = hpoDiseaseCount[0].count;
        
        const [hpoGeneCount] = await mysqlConn.query('SELECT COUNT(*) as count FROM hpo_gene_associations');
        mysqlCounts.hpo_gene_associations = hpoGeneCount[0].count;
        
        console.log('‚úÖ Contagens MySQL conclu√≠das');
        
        // 3. CONTAGENS SQLITE
        console.log('\nüìä CONTANDO REGISTROS NO SQLITE...');
        
        const sqliteCounts = {};
        
        sqliteCounts.cplpCountry = await prisma.cplpCountry.count();
        sqliteCounts.hpoTerm = await prisma.hpoTerm.count();
        sqliteCounts.rareDisease = await prisma.rareDisease.count();
        sqliteCounts.drugbankDrug = await prisma.drugbankDrug.count();
        sqliteCounts.drugInteraction = await prisma.drugInteraction.count();
        sqliteCounts.hpoDiseasAssociation = await prisma.hpoDiseasAssociation.count();
        sqliteCounts.hpoGeneAssociation = await prisma.hpoGeneAssociation.count();
        
        console.log('‚úÖ Contagens SQLite conclu√≠das');
        
        // 4. COMPARA√á√ÉO DETALHADA
        console.log('\nüìä COMPARA√á√ÉO DETALHADA - MYSQL vs SQLITE');
        console.log('=' + '='.repeat(80));
        
        const comparisons = [
            {
                nome: 'CPLP Countries',
                mysql: mysqlCounts.cplp_countries,
                sqlite: sqliteCounts.cplpCountry,
                tabela_mysql: 'cplp_countries',
                modelo_prisma: 'cplpCountry'
            },
            {
                nome: 'HPO Terms', 
                mysql: mysqlCounts.hpo_terms,
                sqlite: sqliteCounts.hpoTerm,
                tabela_mysql: 'hpo_terms',
                modelo_prisma: 'hpoTerm'
            },
            {
                nome: 'Rare Diseases',
                mysql: mysqlCounts.orpha_diseases,
                sqlite: sqliteCounts.rareDisease,
                tabela_mysql: 'orpha_diseases',
                modelo_prisma: 'rareDisease'
            },
            {
                nome: 'Drugbank Drugs',
                mysql: mysqlCounts.drugbank_drugs,
                sqlite: sqliteCounts.drugbankDrug,
                tabela_mysql: 'drugbank_drugs',
                modelo_prisma: 'drugbankDrug'
            },
            {
                nome: 'Drug Interactions',
                mysql: mysqlCounts.drug_interactions,
                sqlite: sqliteCounts.drugInteraction,
                tabela_mysql: 'drug_interactions',
                modelo_prisma: 'drugInteraction'
            },
            {
                nome: 'HPO-Disease Associations',
                mysql: mysqlCounts.hpo_disease_associations,
                sqlite: sqliteCounts.hpoDiseasAssociation,
                tabela_mysql: 'hpo_disease_associations',
                modelo_prisma: 'hpoDiseasAssociation'
            },
            {
                nome: 'HPO-Gene Associations',
                mysql: mysqlCounts.hpo_gene_associations,
                sqlite: sqliteCounts.hpoGeneAssociation,
                tabela_mysql: 'hpo_gene_associations',
                modelo_prisma: 'hpoGeneAssociation'
            }
        ];
        
        let totalMysql = 0;
        let totalSqlite = 0;
        let tabelasPerfeitas = 0;
        let tabelasComProblemas = 0;
        
        console.log('üìã TABELA POR TABELA:');
        console.log('-'.repeat(80));
        
        for (let comp of comparisons) {
            totalMysql += comp.mysql;
            totalSqlite += comp.sqlite;
            
            const percent = comp.mysql > 0 ? ((comp.sqlite / comp.mysql) * 100).toFixed(1) : 0;
            let status = '';
            
            if (percent >= 99.0) {
                status = 'üéâ PERFEITO';
                tabelasPerfeitas++;
            } else if (percent >= 90.0) {
                status = '‚úÖ EXCELENTE';
            } else if (percent >= 50.0) {
                status = '‚ö†Ô∏è  PARCIAL';
                tabelasComProblemas++;
            } else {
                status = '‚ùå CR√çTICO';
                tabelasComProblemas++;
            }
            
            console.log(`üìä ${comp.nome}:`);
            console.log(`   MySQL (${comp.tabela_mysql}): ${comp.mysql.toLocaleString()}`);
            console.log(`   SQLite (${comp.modelo_prisma}): ${comp.sqlite.toLocaleString()}`);
            console.log(`   Sincroniza√ß√£o: ${percent}% ${status}`);
            
            if (percent < 99.0) {
                const deficit = comp.mysql - comp.sqlite;
                console.log(`   D√©ficit: ${deficit.toLocaleString()} registros`);
            }
            console.log('');
        }
        
        // 5. ESTAT√çSTICAS GERAIS
        console.log('üìä ESTAT√çSTICAS GERAIS DA SINCRONIZA√á√ÉO:');
        console.log('=' + '='.repeat(60));
        
        const syncPercentGeral = ((totalSqlite / totalMysql) * 100).toFixed(1);
        
        console.log(`üóÑÔ∏è  Total MySQL: ${totalMysql.toLocaleString()}`);
        console.log(`üóÑÔ∏è  Total SQLite: ${totalSqlite.toLocaleString()}`);
        console.log(`üìà Sincroniza√ß√£o Geral: ${syncPercentGeral}%`);
        console.log(`üéâ Tabelas Perfeitas (‚â•99%): ${tabelasPerfeitas}/7`);
        console.log(`‚ö†Ô∏è  Tabelas com Problemas: ${tabelasComProblemas}/7`);
        
        // 6. AN√ÅLISE POR CATEGORIA
        console.log('\nüìä AN√ÅLISE POR CATEGORIA:');
        console.log('-'.repeat(60));
        
        const categoriaDados = {
            basicos: {
                mysql: mysqlCounts.cplp_countries + mysqlCounts.hpo_terms + mysqlCounts.orpha_diseases,
                sqlite: sqliteCounts.cplpCountry + sqliteCounts.hpoTerm + sqliteCounts.rareDisease
            },
            farmacologia: {
                mysql: mysqlCounts.drugbank_drugs + mysqlCounts.drug_interactions,
                sqlite: sqliteCounts.drugbankDrug + sqliteCounts.drugInteraction
            },
            associacoes: {
                mysql: mysqlCounts.hpo_disease_associations + mysqlCounts.hpo_gene_associations,
                sqlite: sqliteCounts.hpoDiseasAssociation + sqliteCounts.hpoGeneAssociation
            }
        };
        
        for (let [categoria, dados] of Object.entries(categoriaDados)) {
            const percent = ((dados.sqlite / dados.mysql) * 100).toFixed(1);
            console.log(`üìä ${categoria.toUpperCase()}:`);
            console.log(`   MySQL: ${dados.mysql.toLocaleString()} | SQLite: ${dados.sqlite.toLocaleString()} | ${percent}%`);
        }
        
        // 7. AVALIA√á√ÉO FINAL DA TAREFA 0.2
        console.log('\nüéØ AVALIA√á√ÉO FINAL DA TAREFA 0.2:');
        console.log('=' + '='.repeat(60));
        
        if (tabelasPerfeitas >= 6 && syncPercentGeral >= 60) {
            console.log('‚úÖ TAREFA 0.2 CONCLU√çDA COM SUCESSO!');
            console.log('üìä Sistema em estado aceit√°vel para expans√£o');
            console.log('üöÄ Pronto para prosseguir para TAREFA 0.3');
            console.log('\nüìã OBSERVA√á√ïES:');
            console.log(`   ‚Ä¢ ${tabelasPerfeitas}/7 tabelas em sincroniza√ß√£o perfeita`);
            console.log(`   ‚Ä¢ Sincroniza√ß√£o geral: ${syncPercentGeral}%`);
            console.log('   ‚Ä¢ HPO-Disease com limita√ß√£o conhecida de mapeamentos OMIM');
            console.log('   ‚Ä¢ Sistema funcional para pesquisa cient√≠fica');
        } else {
            console.log('‚ö†Ô∏è  TAREFA 0.2 REQUER ATEN√á√ÉO');
            console.log('üîß Sistema precisa de ajustes antes da expans√£o');
            console.log('‚ùå N√ÉO prosseguir para TAREFA 0.3 sem corre√ß√µes');
        }
        
        // 8. DIAGN√ìSTICO ESPEC√çFICO
        console.log('\nüîç DIAGN√ìSTICO ESPEC√çFICO POR TABELA:');
        console.log('-'.repeat(60));
        
        for (let comp of comparisons) {
            const percent = comp.mysql > 0 ? ((comp.sqlite / comp.mysql) * 100).toFixed(1) : 0;
            
            if (percent < 99.0) {
                console.log(`‚ö†Ô∏è  ${comp.nome}:`);
                if (comp.nome === 'HPO-Disease Associations') {
                    console.log('   üîç Causa: Limita√ß√£o de mapeamentos OMIM‚ÜíORPHA dispon√≠veis');
                    console.log('   üí° Solu√ß√£o: Aceitar limita√ß√£o ou expandir mapeamentos');
                } else {
                    console.log('   üîç Investigar causa da discrep√¢ncia');
                    console.log('   üí° Solu√ß√£o: Reimportar dados desta tabela');
                }
            }
        }
        
        console.log('\nüìã RESUMO DA TAREFA 0.2:');
        console.log(`‚úÖ Verifica√ß√£o completa realizada`);
        console.log(`‚úÖ ${tabelasPerfeitas}/7 tabelas perfeitas`);
        console.log(`‚úÖ Sincroniza√ß√£o geral: ${syncPercentGeral}%`);
        console.log(`‚úÖ Sistema ${syncPercentGeral >= 60 ? 'PRONTO' : 'PRECISA AJUSTES'} para expans√£o`);
        
    } catch (error) {
        console.error('üí• ERRO CR√çTICO na TAREFA 0.2:', error.message);
        console.error('üìã Stack trace:', error.stack);
        console.log('\n‚ùå TAREFA 0.2 FALHOU - Investigar antes de prosseguir');
    } finally {
        if (mysqlConn) await mysqlConn.end();
        await prisma.$disconnect();
    }
}

// EXECUTAR TAREFA 0.2
tarefa02_verificacaoCompletaSincronizacao().then(() => {
    console.log('\nüèÅ TAREFA 0.2 FINALIZADA!');
    console.log('üìã Verifique resultados antes de prosseguir para TAREFA 0.3');
}).catch(err => {
    console.error('üí• ERRO FINAL TAREFA 0.2:', err.message);
});
