// IMPORTA√á√ÉO DOS DADOS REAIS DO SERVIDOR - N√ÉO FAKE!
import { PrismaClient } from '@prisma/client';
import fs from 'fs';

const prisma = new PrismaClient();

console.log('üî• IMPORTANDO DADOS REAIS DO SERVIDOR - ZERO FAKE!');
console.log('='.repeat(60));

async function importRealServerData() {
  try {
    await prisma.$connect();
    console.log('üîå Conectado ao SQLite');

    // 1. PA√çSES CPLP (vou ler do arquivo real)
    console.log('\nüåç LENDO PA√çSES CPLP DO SERVIDOR...');
    const countriesFile = fs.readFileSync('database/data20250903/cplp_raras_cplp_countries.sql', 'utf8');
    const countryInserts = countriesFile.match(/INSERT INTO.*?VALUES.*?;/gs) || [];
    console.log(`üìÅ Encontrados ${countryInserts.length} pa√≠ses no arquivo real`);

    // 2. DOEN√áAS ORPHANET (dados reais do servidor)
    console.log('\nüß¨ LENDO DOEN√áAS ORPHANET DO SERVIDOR...');
    const diseasesFile = fs.readFileSync('database/data20250903/cplp_raras_orpha_diseases.sql', 'utf8');
    const diseaseInserts = diseasesFile.match(/INSERT INTO.*?VALUES.*?;/gs) || [];
    console.log(`üìÅ Encontradas ${diseaseInserts.length} doen√ßas no arquivo real`);

    // 3. TERMOS HPO (dados reais do servidor)
    console.log('\nüìã LENDO TERMOS HPO DO SERVIDOR...');
    const hpoFile = fs.readFileSync('database/data20250903/cplp_raras_hpo_terms.sql', 'utf8');
    const hpoInserts = hpoFile.match(/INSERT INTO.*?VALUES.*?;/gs) || [];
    console.log(`üìÅ Encontrados ${hpoInserts.length} termos HPO no arquivo real`);

    // 4. MEDICAMENTOS (dados reais do servidor)
    console.log('\nüíä LENDO MEDICAMENTOS DO SERVIDOR...');
    const drugsFile = fs.readFileSync('database/data20250903/cplp_raras_drugbank_drugs.sql', 'utf8');
    const drugInserts = drugsFile.match(/INSERT INTO.*?VALUES.*?;/gs) || [];
    console.log(`üìÅ Encontrados ${drugInserts.length} medicamentos no arquivo real`);

    // PARSING E INSER√á√ÉO DOS DADOS REAIS
    console.log('\n‚ö†Ô∏è  AN√ÅLISE: OS DADOS REAIS DO SEU SERVIDOR S√ÉO:');
    console.log(`    ‚Ä¢ ${countryInserts.length} pa√≠ses CPLP`);
    console.log(`    ‚Ä¢ ${diseaseInserts.length} doen√ßas Orphanet`);
    console.log(`    ‚Ä¢ ${hpoInserts.length} termos HPO`);
    console.log(`    ‚Ä¢ ${drugInserts.length} medicamentos DrugBank`);

    console.log('\nüîç PRIMEIRA DOEN√áA REAL DO SEU ARQUIVO:');
    if (diseaseInserts[0]) {
      console.log(diseaseInserts[0].substring(0, 200) + '...');
    }

    console.log('\n‚ùå PROBLEMA IDENTIFICADO:');
    console.log('    Os arquivos SQL do servidor usam estrutura MySQL');
    console.log('    Preciso converter para SQLite e extrair os dados');

    console.log('\nüîß SOLU√á√ÉO: Vou analisar a estrutura real e converter...');

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

importRealServerData();
