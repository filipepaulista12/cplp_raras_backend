# Script para instalar e configurar MySQL no Windows
# CPLP-Raras Backend - Setup MySQL Local

Write-Host "üöÄ CONFIGURANDO MYSQL LOCAL - CPLP-RARAS" -ForegroundColor Green
Write-Host "=" * 60
Write-Host "üì¶ Instalando MySQL Server via Chocolatey" -ForegroundColor Yellow

# Verificar se Chocolatey est√° instalado
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Host "‚ö†Ô∏è  Chocolatey n√£o encontrado. Instalando..." -ForegroundColor Yellow
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    Write-Host "‚úÖ Chocolatey instalado" -ForegroundColor Green
}

# Verificar se MySQL j√° est√° instalado
$mysqlService = Get-Service -Name "MySQL*" -ErrorAction SilentlyContinue
if ($mysqlService) {
    Write-Host "‚úÖ MySQL j√° est√° instalado" -ForegroundColor Green
    Write-Host "üìä Status: $($mysqlService.Status)" -ForegroundColor Cyan
} else {
    Write-Host "üì¶ Instalando MySQL Server..." -ForegroundColor Yellow
    try {
        choco install mysql -y
        Write-Host "‚úÖ MySQL instalado com sucesso" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erro ao instalar MySQL: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "üí° Tentando m√©todo alternativo..." -ForegroundColor Yellow
        
        # M√©todo alternativo - instalar MySQL Community
        choco install mysql.server -y
    }
}

# Configurar servi√ßo MySQL
Write-Host "`nüîß CONFIGURANDO SERVI√áO MYSQL" -ForegroundColor Yellow
Write-Host "-" * 40

try {
    # Iniciar servi√ßo MySQL
    $service = Get-Service -Name "MySQL*" | Select-Object -First 1
    if ($service) {
        if ($service.Status -ne "Running") {
            Write-Host "üîÑ Iniciando servi√ßo MySQL..." -ForegroundColor Yellow
            Start-Service $service.Name
            Write-Host "‚úÖ Servi√ßo MySQL iniciado" -ForegroundColor Green
        } else {
            Write-Host "‚úÖ Servi√ßo MySQL j√° est√° rodando" -ForegroundColor Green
        }
    }
} catch {
    Write-Host "‚ö†Ô∏è  Erro ao iniciar servi√ßo: $($_.Exception.Message)" -ForegroundColor Red
}

# Verificar conex√£o MySQL
Write-Host "`nüîå TESTANDO CONEX√ÉO MYSQL" -ForegroundColor Yellow
Write-Host "-" * 40

$mysqlPath = "C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe"
if (Test-Path $mysqlPath) {
    Write-Host "‚úÖ MySQL encontrado: $mysqlPath" -ForegroundColor Green
} else {
    # Procurar MySQL em outros locais
    $possiblePaths = @(
        "C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe",
        "C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql.exe",
        "C:\tools\mysql\current\bin\mysql.exe",
        "C:\ProgramData\chocolatey\lib\mysql\tools\bin\mysql.exe"
    )
    
    foreach ($path in $possiblePaths) {
        if (Test-Path $path) {
            $mysqlPath = $path
            Write-Host "‚úÖ MySQL encontrado: $path" -ForegroundColor Green
            break
        }
    }
    
    if (-not (Test-Path $mysqlPath)) {
        Write-Host "‚ùå MySQL n√£o encontrado nos caminhos padr√£o" -ForegroundColor Red
        Write-Host "üí° Procurando MySQL..." -ForegroundColor Yellow
        
        # Buscar mysql.exe no sistema
        $found = Get-ChildItem -Path "C:\" -Filter "mysql.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($found) {
            $mysqlPath = $found.FullName
            Write-Host "‚úÖ MySQL encontrado: $mysqlPath" -ForegroundColor Green
        }
    }
}

# Configurar vari√°veis de ambiente
Write-Host "`nüåê CONFIGURANDO VARI√ÅVEIS DE AMBIENTE" -ForegroundColor Yellow
Write-Host "-" * 40

$mysqlBinPath = Split-Path $mysqlPath -Parent
$currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")

if ($currentPath -notlike "*$mysqlBinPath*") {
    Write-Host "üîß Adicionando MySQL ao PATH..." -ForegroundColor Yellow
    [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$mysqlBinPath", "Machine")
    Write-Host "‚úÖ MySQL adicionado ao PATH" -ForegroundColor Green
} else {
    Write-Host "‚úÖ MySQL j√° est√° no PATH" -ForegroundColor Green
}

# Configurar usu√°rio root
Write-Host "`nüë§ CONFIGURANDO USU√ÅRIO ROOT" -ForegroundColor Yellow
Write-Host "-" * 40

$rootPassword = "password"
Write-Host "üîë Configurando senha root: $rootPassword" -ForegroundColor Cyan

# Criar arquivo de configura√ß√£o temporal
$configContent = @"
[client]
user=root
password=$rootPassword
host=localhost
port=3306
"@

$configFile = "$env:TEMP\mysql_config.cnf"
$configContent | Out-File -FilePath $configFile -Encoding UTF8

Write-Host "‚úÖ Configura√ß√£o MySQL preparada" -ForegroundColor Green

# Instru√ß√µes finais
Write-Host "`nüéØ PR√ìXIMOS PASSOS" -ForegroundColor Green
Write-Host "=" * 60
Write-Host "1. ‚úÖ MySQL instalado e configurado" -ForegroundColor Green
Write-Host "2. üîÑ Executar: npm run import:backup" -ForegroundColor Yellow
Write-Host "3. üîÑ Executar: npm run test:mysql" -ForegroundColor Yellow
Write-Host "4. üîÑ Verificar sincroniza√ß√£o das bases" -ForegroundColor Yellow

Write-Host "`nüí° COMANDOS DISPON√çVEIS:" -ForegroundColor Cyan
Write-Host "‚Ä¢ mysql -u root -p          # Conectar ao MySQL" -ForegroundColor White
Write-Host "‚Ä¢ net start mysql           # Iniciar servi√ßo" -ForegroundColor White
Write-Host "‚Ä¢ net stop mysql            # Parar servi√ßo" -ForegroundColor White

Write-Host "`n‚úÖ SETUP MYSQL CONCLU√çDO!" -ForegroundColor Green
Write-Host "üîó Pronto para importar backup de 30.23 MB" -ForegroundColor Cyan
Write-Host "=" * 60
