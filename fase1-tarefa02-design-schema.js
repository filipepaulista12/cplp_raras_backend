/**
 * üß¨ FASE 1 - TAREFA 1.2: DESIGN DE SCHEMA EXPANDIDO PARA DADOS GEN√îMICOS
 * üéØ OBJETIVO: Estender schema atual para incorporar dados ClinVar e OMIM
 * üìä META: Manter sincroniza√ß√£o perfeita MySQL ‚â° SQLite
 */

const { PrismaClient } = require('@prisma/client');
const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');

const prisma = new PrismaClient();

async function designSchemaExpandido() {
    console.log('üß¨ FASE 1 - TAREFA 1.2: DESIGN DE SCHEMA EXPANDIDO PARA DADOS GEN√îMICOS');
    console.log('=' + '='.repeat(80));
    console.log('üéØ Estendendo schema para incorporar dados ClinVar e OMIM');
    
    let mysqlConn;
    
    try {
        mysqlConn = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '',
            database: 'cplp_raras'
        });
        
        // ====================================================================
        // üìã PARTE 1: AN√ÅLISE DO SCHEMA ATUAL
        // ====================================================================
        console.log('\nüìã PARTE 1: AN√ÅLISE DO SCHEMA ATUAL');
        console.log('-'.repeat(70));
        
        // Verificar tabelas existentes
        const [existingTables] = await mysqlConn.query('SHOW TABLES');
        console.log(`‚úÖ Tabelas MySQL existentes: ${existingTables.length}`);
        existingTables.forEach(table => {
            const tableName = Object.values(table)[0];
            console.log(`   üìã ${tableName}`);
        });
        
        // ====================================================================
        // üß¨ PARTE 2: DESIGN TABELAS CLINVAR
        // ====================================================================
        console.log('\nüß¨ PARTE 2: DESIGN TABELAS CLINVAR');
        console.log('-'.repeat(70));
        
        const clinvarTables = {
            // Tabela principal de variantes ClinVar
            clinvar_variants: `
CREATE TABLE clinvar_variants (
    id INT PRIMARY KEY AUTO_INCREMENT,
    clinvar_id VARCHAR(50) UNIQUE NOT NULL COMMENT 'ClinVar Variation ID',
    name VARCHAR(500) COMMENT 'Nome da variante',
    type ENUM('single nucleotide variant', 'deletion', 'insertion', 'duplication', 'inversion', 'copy number gain', 'copy number loss', 'other') COMMENT 'Tipo de variante',
    chromosome VARCHAR(10) COMMENT 'Cromossomo',
    start_position BIGINT COMMENT 'Posi√ß√£o inicial',
    end_position BIGINT COMMENT 'Posi√ß√£o final',
    reference_allele TEXT COMMENT 'Alelo de refer√™ncia',
    alternate_allele TEXT COMMENT 'Alelo alternativo',
    gene_symbol VARCHAR(50) COMMENT 'S√≠mbolo do gene',
    gene_id INT COMMENT 'Gene ID (NCBI)',
    hgvs_c VARCHAR(500) COMMENT 'HGVS nomenclatura (coding)',
    hgvs_p VARCHAR(500) COMMENT 'HGVS nomenclatura (protein)',
    hgvs_g VARCHAR(500) COMMENT 'HGVS nomenclatura (genomic)',
    assembly VARCHAR(20) DEFAULT 'GRCh38' COMMENT 'Assembly gen√¥mico',
    clinical_significance ENUM('pathogenic', 'likely pathogenic', 'uncertain significance', 'likely benign', 'benign', 'other') COMMENT 'Signific√¢ncia cl√≠nica',
    review_status VARCHAR(100) COMMENT 'Status de revis√£o',
    last_evaluated DATE COMMENT 'Data da √∫ltima avalia√ß√£o',
    submission_count INT DEFAULT 0 COMMENT 'N√∫mero de submiss√µes',
    origin VARCHAR(100) COMMENT 'Origem da variante',
    affected_status VARCHAR(100) COMMENT 'Status de afeta√ß√£o',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_clinvar_id (clinvar_id),
    INDEX idx_gene_symbol (gene_symbol),
    INDEX idx_chromosome (chromosome),
    INDEX idx_clinical_significance (clinical_significance),
    INDEX idx_gene_id (gene_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Variantes gen√©ticas do ClinVar'`,

            // Submiss√µes/interpreta√ß√µes para cada variante
            clinvar_submissions: `
CREATE TABLE clinvar_submissions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    variant_id INT NOT NULL COMMENT 'FK para clinvar_variants',
    submitter_name VARCHAR(200) COMMENT 'Nome do submissor',
    submission_date DATE COMMENT 'Data da submiss√£o',
    clinical_significance ENUM('pathogenic', 'likely pathogenic', 'uncertain significance', 'likely benign', 'benign', 'other') COMMENT 'Signific√¢ncia cl√≠nica desta submiss√£o',
    condition_name VARCHAR(500) COMMENT 'Nome da condi√ß√£o',
    condition_id VARCHAR(100) COMMENT 'ID da condi√ß√£o (OMIM, Orphanet, etc)',
    method_type VARCHAR(100) COMMENT 'Tipo de m√©todo de an√°lise',
    description TEXT COMMENT 'Descri√ß√£o da submiss√£o',
    citation_source VARCHAR(200) COMMENT 'Fonte da cita√ß√£o',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (variant_id) REFERENCES clinvar_variants(id) ON DELETE CASCADE,
    INDEX idx_variant_id (variant_id),
    INDEX idx_submitter (submitter_name),
    INDEX idx_condition_id (condition_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Submiss√µes e interpreta√ß√µes para variantes ClinVar'`,

            // Associa√ß√µes entre variantes ClinVar e fen√≥tipos HPO
            clinvar_hpo_associations: `
CREATE TABLE clinvar_hpo_associations (
    id INT PRIMARY KEY AUTO_INCREMENT,
    variant_id INT NOT NULL COMMENT 'FK para clinvar_variants',
    hpo_id VARCHAR(20) NOT NULL COMMENT 'FK para hpo_terms',
    evidence_code VARCHAR(10) COMMENT 'C√≥digo de evid√™ncia',
    source VARCHAR(100) COMMENT 'Fonte da associa√ß√£o',
    confidence_score DECIMAL(3,2) COMMENT 'Score de confian√ßa (0.00-1.00)',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (variant_id) REFERENCES clinvar_variants(id) ON DELETE CASCADE,
    FOREIGN KEY (hpo_id) REFERENCES hpo_terms(hpo_id) ON DELETE CASCADE,
    UNIQUE KEY unique_variant_hpo (variant_id, hpo_id),
    INDEX idx_variant_id (variant_id),
    INDEX idx_hpo_id (hpo_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Associa√ß√µes entre variantes ClinVar e fen√≥tipos HPO'`,

            // Genes relacionados √†s variantes
            clinvar_genes: `
CREATE TABLE clinvar_genes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    gene_id INT UNIQUE NOT NULL COMMENT 'NCBI Gene ID',
    symbol VARCHAR(50) NOT NULL COMMENT 'S√≠mbolo oficial do gene',
    name VARCHAR(500) COMMENT 'Nome completo do gene',
    aliases TEXT COMMENT 'Nomes alternativos (JSON array)',
    chromosome VARCHAR(10) COMMENT 'Cromossomo',
    map_location VARCHAR(100) COMMENT 'Localiza√ß√£o citogen√©tica',
    gene_type VARCHAR(50) COMMENT 'Tipo do gene',
    description TEXT COMMENT 'Descri√ß√£o do gene',
    summary TEXT COMMENT 'Resumo funcional',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_symbol (symbol),
    INDEX idx_gene_id (gene_id),
    INDEX idx_chromosome (chromosome)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Genes associados √†s variantes ClinVar'`
        };
        
        console.log('üìä TABELAS CLINVAR PROJETADAS:');
        Object.keys(clinvarTables).forEach(table => {
            console.log(`   üß¨ ${table}`);
        });
        
        // ====================================================================
        // üî¨ PARTE 3: DESIGN TABELAS OMIM
        // ====================================================================
        console.log('\nüî¨ PARTE 3: DESIGN TABELAS OMIM');
        console.log('-'.repeat(70));
        
        const omimTables = {
            // Entradas principais do OMIM
            omim_entries: `
CREATE TABLE omim_entries (
    id INT PRIMARY KEY AUTO_INCREMENT,
    mim_number INT UNIQUE NOT NULL COMMENT 'N√∫mero OMIM',
    title VARCHAR(500) NOT NULL COMMENT 'T√≠tulo da entrada',
    title_pt VARCHAR(500) COMMENT 'T√≠tulo traduzido',
    entry_type ENUM('gene', 'phenotype', 'gene_phenotype', 'other') COMMENT 'Tipo de entrada',
    status ENUM('live', 'removed', 'moved') DEFAULT 'live' COMMENT 'Status da entrada',
    created_date DATE COMMENT 'Data de cria√ß√£o no OMIM',
    edited_date DATE COMMENT 'Data da √∫ltima edi√ß√£o',
    gene_symbol VARCHAR(50) COMMENT 'S√≠mbolo do gene (se aplic√°vel)',
    gene_symbols_alt TEXT COMMENT 'S√≠mbolos alternativos do gene',
    chromosome VARCHAR(10) COMMENT 'Cromossomo',
    description TEXT COMMENT 'Descri√ß√£o/texto principal',
    description_pt TEXT COMMENT 'Descri√ß√£o traduzida',
    clinical_synopsis JSON COMMENT 'Sinopse cl√≠nica estruturada',
    inheritance_pattern VARCHAR(100) COMMENT 'Padr√£o de heran√ßa',
    mapping_info VARCHAR(200) COMMENT 'Informa√ß√µes de mapeamento',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_mim_number (mim_number),
    INDEX idx_gene_symbol (gene_symbol),
    INDEX idx_entry_type (entry_type),
    INDEX idx_chromosome (chromosome)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Entradas principais do OMIM'`,

            // Fen√≥tipos associados √†s entradas OMIM
            omim_phenotypes: `
CREATE TABLE omim_phenotypes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    omim_entry_id INT NOT NULL COMMENT 'FK para omim_entries',
    phenotype_mim INT COMMENT 'N√∫mero MIM do fen√≥tipo',
    phenotype_name VARCHAR(500) NOT NULL COMMENT 'Nome do fen√≥tipo',
    phenotype_name_pt VARCHAR(500) COMMENT 'Nome traduzido',
    phenotype_mapping_key INT COMMENT 'Chave de mapeamento (1-4)',
    phenotype_description TEXT COMMENT 'Descri√ß√£o do fen√≥tipo',
    inheritance VARCHAR(100) COMMENT 'Padr√£o de heran√ßa espec√≠fico',
    comments TEXT COMMENT 'Coment√°rios adicionais',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (omim_entry_id) REFERENCES omim_entries(id) ON DELETE CASCADE,
    INDEX idx_omim_entry_id (omim_entry_id),
    INDEX idx_phenotype_mim (phenotype_mim),
    INDEX idx_phenotype_name (phenotype_name)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Fen√≥tipos associados √†s entradas OMIM'`,

            // Associa√ß√µes OMIM-HPO (expandindo as existentes)
            omim_hpo_associations: `
CREATE TABLE omim_hpo_associations (
    id INT PRIMARY KEY AUTO_INCREMENT,
    omim_entry_id INT NOT NULL COMMENT 'FK para omim_entries',
    hpo_id VARCHAR(20) NOT NULL COMMENT 'FK para hpo_terms',
    evidence_code VARCHAR(10) COMMENT 'C√≥digo de evid√™ncia',
    frequency VARCHAR(50) COMMENT 'Frequ√™ncia do fen√≥tipo',
    onset VARCHAR(50) COMMENT 'Idade de in√≠cio',
    source VARCHAR(100) DEFAULT 'OMIM' COMMENT 'Fonte da associa√ß√£o',
    confidence_score DECIMAL(3,2) COMMENT 'Score de confian√ßa',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (omim_entry_id) REFERENCES omim_entries(id) ON DELETE CASCADE,
    FOREIGN KEY (hpo_id) REFERENCES hpo_terms(hpo_id) ON DELETE CASCADE,
    UNIQUE KEY unique_omim_hpo (omim_entry_id, hpo_id),
    INDEX idx_omim_entry_id (omim_entry_id),
    INDEX idx_hpo_id (hpo_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Associa√ß√µes entre entradas OMIM e fen√≥tipos HPO'`,

            // Mapeamentos cruzados entre OMIM e outras bases
            omim_external_mappings: `
CREATE TABLE omim_external_mappings (
    id INT PRIMARY KEY AUTO_INCREMENT,
    omim_entry_id INT NOT NULL COMMENT 'FK para omim_entries',
    external_db ENUM('Orphanet', 'ICD10', 'ICD11', 'SNOMED', 'HPO', 'UMLS', 'ClinVar') NOT NULL COMMENT 'Base externa',
    external_id VARCHAR(100) NOT NULL COMMENT 'ID na base externa',
    mapping_type ENUM('exact', 'related', 'broader', 'narrower', 'similar') DEFAULT 'exact' COMMENT 'Tipo de mapeamento',
    confidence_score DECIMAL(3,2) COMMENT 'Confian√ßa do mapeamento',
    source VARCHAR(100) COMMENT 'Fonte do mapeamento',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (omim_entry_id) REFERENCES omim_entries(id) ON DELETE CASCADE,
    UNIQUE KEY unique_omim_external (omim_entry_id, external_db, external_id),
    INDEX idx_omim_entry_id (omim_entry_id),
    INDEX idx_external_db (external_db),
    INDEX idx_external_id (external_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci 
COMMENT='Mapeamentos entre OMIM e bases externas'`
        };
        
        console.log('üìä TABELAS OMIM PROJETADAS:');
        Object.keys(omimTables).forEach(table => {
            console.log(`   üî¨ ${table}`);
        });
        
        // ====================================================================
        // üîó PARTE 4: RELACIONAMENTOS E INTEGRIDADE
        // ====================================================================
        console.log('\nüîó PARTE 4: RELACIONAMENTOS E INTEGRIDADE');
        console.log('-'.repeat(70));
        
        const relacionamentos = {
            'ClinVar ‚Üí HPO': 'clinvar_hpo_associations conecta variantes a fen√≥tipos',
            'ClinVar ‚Üí Genes': 'clinvar_variants.gene_id ‚Üí clinvar_genes.gene_id',
            'ClinVar ‚Üí Orphanet': 'Via OMIM numbers em submissions ‚Üí omim_external_mappings',
            'OMIM ‚Üí HPO': 'omim_hpo_associations (expans√£o das existentes)',
            'OMIM ‚Üí Orphanet': 'omim_external_mappings.external_db = "Orphanet"',
            'OMIM ‚Üí ClinVar': 'Via gene symbols compartilhados'
        };
        
        console.log('üîó RELACIONAMENTOS PROJETADOS:');
        Object.entries(relacionamentos).forEach(([rel, desc]) => {
            console.log(`   ${rel}: ${desc}`);
        });
        
        // ====================================================================
        // üìä PARTE 5: ATUALIZA√á√ÉO SCHEMA PRISMA
        // ====================================================================
        console.log('\nüìä PARTE 5: DESIGN MODELS PRISMA CORRESPONDENTES');
        console.log('-'.repeat(70));
        
        const prismaModels = `
// ============================================================================
// üß¨ MODELOS CLINVAR
// ============================================================================

// Variantes ClinVar
model ClinvarVariant {
  id                     Int      @id @default(autoincrement())
  clinvar_id             String   @unique @map("clinvar_id")
  name                   String?
  type                   String?
  chromosome             String?
  start_position         BigInt?  @map("start_position")
  end_position           BigInt?  @map("end_position")
  reference_allele       String?  @map("reference_allele")
  alternate_allele       String?  @map("alternate_allele")
  gene_symbol            String?  @map("gene_symbol")
  gene_id                Int?     @map("gene_id")
  hgvs_c                 String?  @map("hgvs_c")
  hgvs_p                 String?  @map("hgvs_p")
  hgvs_g                 String?  @map("hgvs_g")
  assembly               String?  @default("GRCh38")
  clinical_significance  String?  @map("clinical_significance")
  review_status          String?  @map("review_status")
  last_evaluated         DateTime? @map("last_evaluated")
  submission_count       Int?     @default(0) @map("submission_count")
  origin                 String?
  affected_status        String?  @map("affected_status")
  is_active              Boolean  @default(true) @map("is_active")
  created_at             DateTime @default(now()) @map("created_at")
  updated_at             DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  submissions            ClinvarSubmission[]
  hpo_associations       ClinvarHpoAssociation[]
  gene                   ClinvarGene? @relation(fields: [gene_id], references: [gene_id])

  @@map("clinvar_variants")
}

// Submiss√µes ClinVar
model ClinvarSubmission {
  id                     Int      @id @default(autoincrement())
  variant_id             Int      @map("variant_id")
  submitter_name         String?  @map("submitter_name")
  submission_date        DateTime? @map("submission_date")
  clinical_significance  String?  @map("clinical_significance")
  condition_name         String?  @map("condition_name")
  condition_id           String?  @map("condition_id")
  method_type            String?  @map("method_type")
  description            String?
  citation_source        String?  @map("citation_source")
  created_at             DateTime @default(now()) @map("created_at")
  updated_at             DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  variant                ClinvarVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  @@map("clinvar_submissions")
}

// Associa√ß√µes ClinVar-HPO
model ClinvarHpoAssociation {
  id                     Int      @id @default(autoincrement())
  variant_id             Int      @map("variant_id")
  hpo_id                 String   @map("hpo_id")
  evidence_code          String?  @map("evidence_code")
  source                 String?
  confidence_score       Decimal? @map("confidence_score")
  created_at             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  variant                ClinvarVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  hpo_term               HpoTerm @relation(fields: [hpo_id], references: [hpo_id], onDelete: Cascade)

  @@unique([variant_id, hpo_id])
  @@map("clinvar_hpo_associations")
}

// Genes ClinVar
model ClinvarGene {
  id                     Int      @id @default(autoincrement())
  gene_id                Int      @unique @map("gene_id")
  symbol                 String
  name                   String?
  aliases                String?
  chromosome             String?
  map_location           String?  @map("map_location")
  gene_type              String?  @map("gene_type")
  description            String?
  summary                String?
  is_active              Boolean  @default(true) @map("is_active")
  created_at             DateTime @default(now()) @map("created_at")
  updated_at             DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  variants               ClinvarVariant[]

  @@map("clinvar_genes")
}

// ============================================================================
// üî¨ MODELOS OMIM
// ============================================================================

// Entradas OMIM
model OmimEntry {
  id                     Int      @id @default(autoincrement())
  mim_number             Int      @unique @map("mim_number")
  title                  String
  title_pt               String?  @map("title_pt")
  entry_type             String?  @map("entry_type")
  status                 String?  @default("live")
  created_date           DateTime? @map("created_date")
  edited_date            DateTime? @map("edited_date")
  gene_symbol            String?  @map("gene_symbol")
  gene_symbols_alt       String?  @map("gene_symbols_alt")
  chromosome             String?
  description            String?
  description_pt         String?  @map("description_pt")
  clinical_synopsis      String?  @map("clinical_synopsis") // JSON como String
  inheritance_pattern    String?  @map("inheritance_pattern")
  mapping_info           String?  @map("mapping_info")
  is_active              Boolean  @default(true) @map("is_active")
  created_at             DateTime @default(now()) @map("created_at")
  updated_at             DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  phenotypes             OmimPhenotype[]
  hpo_associations       OmimHpoAssociation[]
  external_mappings      OmimExternalMapping[]

  @@map("omim_entries")
}

// Fen√≥tipos OMIM
model OmimPhenotype {
  id                     Int      @id @default(autoincrement())
  omim_entry_id          Int      @map("omim_entry_id")
  phenotype_mim          Int?     @map("phenotype_mim")
  phenotype_name         String   @map("phenotype_name")
  phenotype_name_pt      String?  @map("phenotype_name_pt")
  phenotype_mapping_key  Int?     @map("phenotype_mapping_key")
  phenotype_description  String?  @map("phenotype_description")
  inheritance            String?
  comments               String?
  created_at             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  omim_entry             OmimEntry @relation(fields: [omim_entry_id], references: [id], onDelete: Cascade)

  @@map("omim_phenotypes")
}

// Associa√ß√µes OMIM-HPO
model OmimHpoAssociation {
  id                     Int      @id @default(autoincrement())
  omim_entry_id          Int      @map("omim_entry_id")
  hpo_id                 String   @map("hpo_id")
  evidence_code          String?  @map("evidence_code")
  frequency              String?
  onset                  String?
  source                 String?  @default("OMIM")
  confidence_score       Decimal? @map("confidence_score")
  created_at             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  omim_entry             OmimEntry @relation(fields: [omim_entry_id], references: [id], onDelete: Cascade)
  hpo_term               HpoTerm @relation(fields: [hpo_id], references: [hpo_id], onDelete: Cascade)

  @@unique([omim_entry_id, hpo_id])
  @@map("omim_hpo_associations")
}

// Mapeamentos externos OMIM
model OmimExternalMapping {
  id                     Int      @id @default(autoincrement())
  omim_entry_id          Int      @map("omim_entry_id")
  external_db            String   @map("external_db")
  external_id            String   @map("external_id")
  mapping_type           String?  @default("exact") @map("mapping_type")
  confidence_score       Decimal? @map("confidence_score")
  source                 String?
  created_at             DateTime @default(now()) @map("created_at")

  // Relacionamentos
  omim_entry             OmimEntry @relation(fields: [omim_entry_id], references: [id], onDelete: Cascade)

  @@unique([omim_entry_id, external_db, external_id])
  @@map("omim_external_mappings")
}`;
        
        console.log('üìä MODELS PRISMA PROJETADOS:');
        console.log('   üß¨ ClinvarVariant, ClinvarSubmission, ClinvarHpoAssociation, ClinvarGene');
        console.log('   üî¨ OmimEntry, OmimPhenotype, OmimHpoAssociation, OmimExternalMapping');
        
        // ====================================================================
        // üíæ PARTE 6: SALVAR SCHEMAS PROJETADOS
        // ====================================================================
        console.log('\nüíæ PARTE 6: SALVANDO SCHEMAS PROJETADOS');
        console.log('-'.repeat(70));
        
        // Criar diret√≥rio de schemas
        const schemasDir = path.join(process.cwd(), 'schemas', 'fase1-genomica');
        await fs.mkdir(schemasDir, { recursive: true });
        
        // Salvar SQL para MySQL
        const mysqlSchema = Object.entries({...clinvarTables, ...omimTables})
            .map(([name, sql]) => `-- ${name}\n${sql};`)
            .join('\n\n');
        
        const mysqlSchemaPath = path.join(schemasDir, 'mysql-genomica-extension.sql');
        await fs.writeFile(mysqlSchemaPath, mysqlSchema);
        console.log(`‚úÖ Schema MySQL salvo: ${mysqlSchemaPath}`);
        
        // Salvar Models Prisma
        const prismaSchemaPath = path.join(schemasDir, 'prisma-genomica-models.prisma');
        await fs.writeFile(prismaSchemaPath, prismaModels);
        console.log(`‚úÖ Models Prisma salvos: ${prismaSchemaPath}`);
        
        // ====================================================================
        // üìä PARTE 7: ESTIMATIVAS DE IMPACTO
        // ====================================================================
        console.log('\nüìä PARTE 7: ESTIMATIVAS DE IMPACTO');
        console.log('-'.repeat(70));
        
        const estimativas = {
            clinvar: {
                variantes: '3.766.821 (inicial)',
                submissoes: '~10M (m√©dia 3 por variante)',
                genes: '~25K √∫nicos',
                hpo_associations: '~1M (estimativa conservadora)'
            },
            omim: {
                entries: '~25K',
                phenotypes: '~50K',
                hpo_associations: '~100K (expans√£o significativa)',
                external_mappings: '~150K'
            },
            impacto_total: {
                registros_adicionais: '~15M registros',
                crescimento: 'Base atual 106K ‚Üí 15M+ (140x expans√£o)',
                storage_estimate: '~5-10GB adicionais',
                sync_complexity: 'Mantida - MySQL ‚â° SQLite'
            }
        };
        
        console.log('üìà ESTIMATIVAS DE IMPACTO:');
        Object.entries(estimativas).forEach(([categoria, dados]) => {
            console.log(`   üìä ${categoria.toUpperCase()}:`);
            Object.entries(dados).forEach(([item, valor]) => {
                console.log(`      ‚Ä¢ ${item}: ${valor}`);
            });
        });
        
        // ====================================================================
        // üéØ PARTE 8: RELAT√ìRIO FINAL
        // ====================================================================
        const relatorio = {
            timestamp: new Date().toISOString(),
            fase: '1.2 - Design Schema Expandido',
            status: 'CONCLU√çDO',
            tabelas_mysql: Object.keys({...clinvarTables, ...omimTables}),
            models_prisma: [
                'ClinvarVariant', 'ClinvarSubmission', 'ClinvarHpoAssociation', 'ClinvarGene',
                'OmimEntry', 'OmimPhenotype', 'OmimHpoAssociation', 'OmimExternalMapping'
            ],
            relacionamentos: relacionamentos,
            estimativas: estimativas,
            arquivos_gerados: [
                mysqlSchemaPath,
                prismaSchemaPath
            ],
            validacao: 'Schema projetado mant√©m princ√≠pio MySQL ‚â° SQLite',
            proxima_tarefa: '1.3 - Implementa√ß√£o e teste do schema expandido'
        };
        
        const relatorioPath = path.join(schemasDir, 'design-report.json');
        await fs.writeFile(relatorioPath, JSON.stringify(relatorio, null, 2));
        console.log(`\nüìÑ Relat√≥rio completo salvo: ${relatorioPath}`);
        
        console.log('\nüéâ TAREFA 1.2 CONCLU√çDA COM SUCESSO!');
        console.log('‚úÖ Schema expandido projetado para ClinVar e OMIM');
        console.log('‚úÖ Relacionamentos definidos com dados existentes');
        console.log('‚úÖ Models Prisma sincronizados com MySQL');
        console.log('‚úÖ Estimativas de impacto calculadas');
        console.log('üöÄ Pronto para TAREFA 1.3: Implementa√ß√£o do schema');
        
        return true;
        
    } catch (error) {
        console.error('üí• ERRO CR√çTICO no design:', error.message);
        console.error('üìã Stack trace:', error.stack);
        return false;
    } finally {
        if (mysqlConn) await mysqlConn.end();
        await prisma.$disconnect();
    }
}

// EXECUTAR DESIGN
designSchemaExpandido().then((sucesso) => {
    console.log('\nüèÅ DESIGN DE SCHEMA FINALIZADO!');
    if (sucesso) {
        console.log('üéâ TAREFA 1.2 APROVADA - Pronto para TAREFA 1.3!');
    } else {
        console.log('‚ö†Ô∏è  TAREFA 1.2 COM PROBLEMAS - Revisar antes de prosseguir!');
    }
}).catch(err => {
    console.error('üí• ERRO FINAL no design:', err.message);
});
