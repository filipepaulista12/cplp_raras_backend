/**
 * Testes E2E principais - Verifica√ß√£o completa do sistema
 */
import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from '../src/app.module';

describe('CPLP-Raras Backend (e2e)', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  describe('üî• TESTES CR√çTICOS DO SISTEMA', () => {
    it('‚úÖ Servidor deve estar funcionando', () => {
      return request(app.getHttpServer())
        .get('/')
        .expect(200)
        .expect(/CPLP-Raras/);
    });

    it('‚úÖ API Status deve retornar dados', () => {
      return request(app.getHttpServer())
        .get('/api/status')
        .expect(200)
        .expect((res) => {
          expect(res.body).toHaveProperty('status', 'OK');
          expect(res.body).toHaveProperty('timestamp');
        });
    });

    it('‚úÖ Teste de conex√£o com banco', () => {
      return request(app.getHttpServer())
        .get('/api/db-test')
        .expect(200)
        .expect((res) => {
          expect(res.body).toHaveProperty('status');
          expect(res.body).toHaveProperty('database');
        });
    });
  });

  describe('üî¨ M√ìDULO ORPHANET', () => {
    it('‚úÖ Deve retornar dados Orphanet', () => {
      return request(app.getHttpServer())
        .get('/api/orphanet')
        .expect(200)
        .expect((res) => {
          expect(res.body).toHaveProperty('status', 'success');
          expect(res.body).toHaveProperty('data');
        });
    });

    it('‚úÖ Estat√≠sticas Orphanet devem funcionar', () => {
      return request(app.getHttpServer())
        .get('/api/orphanet/stats')
        .expect(200);
    });
  });

  describe('üß¨ M√ìDULO HPO', () => {
    it('‚úÖ Deve retornar dados HPO', () => {
      return request(app.getHttpServer())
        .get('/api/hpo')
        .expect(200);
    });

    it('‚úÖ Busca HPO deve funcionar', () => {
      return request(app.getHttpServer())
        .get('/api/hpo/search?term=pain')
        .expect(200);
    });
  });

  describe('üíä M√ìDULO DRUGBANK', () => {
    it('‚úÖ Deve retornar dados DrugBank', () => {
      return request(app.getHttpServer())
        .get('/api/drugbank')
        .expect(200);
    });

    it('‚úÖ Estat√≠sticas DrugBank devem funcionar', () => {
      return request(app.getHttpServer())
        .get('/api/drugbank/stats')
        .expect(200);
    });
  });

  describe('üåç M√ìDULO CPLP', () => {
    it('‚úÖ Deve retornar pa√≠ses CPLP', () => {
      return request(app.getHttpServer())
        .get('/api/cplp/countries')
        .expect(200)
        .expect((res) => {
          expect(Array.isArray(res.body.data.countries)).toBe(true);
          expect(res.body.data.countries.length).toBeGreaterThan(0);
        });
    });
  });

  describe('üìä M√ìDULO DISEASES', () => {
    it('‚úÖ Endpoint diseases deve funcionar', () => {
      return request(app.getHttpServer())
        .get('/api/diseases')
        .expect(200);
    });
  });

  describe('üåü OPEN DATA (se implementado)', () => {
    it('üîÑ Portal Open Data (se existir)', async () => {
      const response = await request(app.getHttpServer())
        .get('/opendata');
      
      // Se existir, deve ser 200, sen√£o 404 √© OK
      expect([200, 404]).toContain(response.status);
    });
  });
});
