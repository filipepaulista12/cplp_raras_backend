const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');

console.log('üõ†Ô∏è CONFIGURADOR MYSQL LOCAL');
console.log('‚ïê'.repeat(50));

async function configurarMySQLLocal() {
    let connection;
    
    try {
        console.log('üîó Conectando no MySQL local...');
        
        // Conectar no MySQL (sem especificar database)
        connection = await mysql.createConnection({
            host: 'localhost',
            port: 3306,
            user: 'root',
            password: 'root123', // Senha padr√£o comum
            multipleStatements: true
        });
        
        console.log('‚úÖ MySQL conectado!');
        
        // Criar database se n√£o existir
        console.log('\nüì¶ Criando database cplp_raras...');
        await connection.execute('CREATE DATABASE IF NOT EXISTS cplp_raras CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci');
        console.log('‚úÖ Database criado/verificado');
        
        // Usar a database
        await connection.execute('USE cplp_raras');
        
        // Verificar se j√° tem tabelas
        const [tables] = await connection.execute('SHOW TABLES');
        console.log(`\nüìã Tabelas existentes: ${tables.length}`);
        
        if (tables.length === 0) {
            console.log('\nüèóÔ∏è Criando estrutura de tabelas...');
            
            // Criar tabelas principais manualmente
            await connection.execute(`
                CREATE TABLE IF NOT EXISTS cplp_countries (
                    id INT PRIMARY KEY AUTO_INCREMENT,
                    code VARCHAR(2) NOT NULL UNIQUE,
                    name VARCHAR(100) NOT NULL,
                    name_pt VARCHAR(100),
                    flag_emoji VARCHAR(10),
                    population VARCHAR(20),
                    language VARCHAR(10),
                    health_system TEXT,
                    rare_disease_policy TEXT,
                    orphan_drugs_program TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            `);
            
            await connection.execute(`
                CREATE TABLE IF NOT EXISTS hpo_terms (
                    id INT PRIMARY KEY AUTO_INCREMENT,
                    hpo_id VARCHAR(20) NOT NULL UNIQUE,
                    name VARCHAR(255) NOT NULL,
                    definition TEXT,
                    name_pt VARCHAR(255),
                    definition_pt TEXT,
                    is_obsolete BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            `);
            
            await connection.execute(`
                CREATE TABLE IF NOT EXISTS rare_diseases (
                    id INT PRIMARY KEY AUTO_INCREMENT,
                    orphacode VARCHAR(20) NOT NULL UNIQUE,
                    name VARCHAR(255) NOT NULL,
                    name_pt VARCHAR(255),
                    definition TEXT,
                    definition_pt TEXT,
                    synonyms TEXT,
                    synonyms_pt TEXT,
                    prevalence VARCHAR(100),
                    inheritance VARCHAR(100),
                    age_onset VARCHAR(100),
                    icd10_codes TEXT,
                    omim_codes TEXT,
                    umls_codes TEXT,
                    mesh_codes TEXT,
                    gard_id VARCHAR(50),
                    status VARCHAR(50),
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            `);
            
            console.log('‚úÖ Tabelas principais criadas');
        }
        
        // Popular com dados dos pa√≠ses CPLP
        console.log('\nüåç Inserindo pa√≠ses CPLP...');
        
        const paisesCPLP = [
            ['BR', 'Brasil', 'Brasil', 'üáßüá∑', '215300000', 'pt', 'Sistema √önico de Sa√∫de (SUS)', 'Pol√≠tica Nacional de Aten√ß√£o √†s Pessoas com Doen√ßas Raras (Portaria GM/MS n¬∫ 199/2014)', 'RENAME - Rela√ß√£o Nacional de Medicamentos Essenciais (inclui medicamentos √≥rf√£os)'],
            ['PT', 'Portugal', 'Portugal', 'üáµüáπ', '10330000', 'pt', 'Servi√ßo Nacional de Sa√∫de (SNS)', 'Programa Nacional para as Doen√ßas Raras', 'Medicamentos √ìrf√£os - INFARMED, I.P.'],
            ['AO', 'Angola', 'Angola', 'üá¶üá¥', '35600000', 'pt', 'Sistema Nacional de Sa√∫de de Angola', 'Em desenvolvimento - Plano Nacional de Sa√∫de 2025-2030', 'Lista Nacional de Medicamentos Essenciais (sem categoria espec√≠fica para √≥rf√£os)'],
            ['MZ', 'Mo√ßambique', 'Mo√ßambique', 'üá≤üáø', '33100000', 'pt', 'Servi√ßo Nacional de Sa√∫de de Mo√ßambique', 'Estrat√©gia do Sector da Sa√∫de 2014-2025 (men√ß√£o a doen√ßas n√£o transmiss√≠veis)', 'Lista Nacional de Medicamentos e Dispositivos M√©dicos'],
            ['CV', 'Cabo Verde', 'Cabo Verde', 'üá®üáª', '593000', 'pt', 'Sistema Nacional de Sa√∫de de Cabo Verde', 'Plano Nacional de Desenvolvimento Sanit√°rio 2017-2021', 'Lista Nacional de Medicamentos Essenciais'],
            ['GW', 'Guin√©-Bissau', 'Guin√©-Bissau', 'üá¨üáº', '2150000', 'pt', 'Sistema Nacional de Sa√∫de da Guin√©-Bissau', 'Pol√≠tica Nacional de Sa√∫de 2015-2025', 'Lista Nacional de Medicamentos Essenciais (b√°sica)'],
            ['ST', 'S√£o Tom√© e Pr√≠ncipe', 'S√£o Tom√© e Pr√≠ncipe', 'üá∏üáπ', '230000', 'pt', 'Servi√ßo Nacional de Sa√∫de de S√£o Tom√© e Pr√≠ncipe', 'Pol√≠tica Nacional de Sa√∫de 2015-2025', 'Lista Nacional de Medicamentos Essenciais'],
            ['TL', 'Timor-Leste', 'Timor-Leste', 'üáπüá±', '1360000', 'pt', 'Sistema Nacional de Sa√∫de de Timor-Leste', 'Plano Nacional de Sa√∫de 2020-2030', 'Lista Nacional de Medicamentos Essenciais'],
            ['GQ', 'Guin√© Equatorial', 'Guin√© Equatorial', 'üá¨üá∂', '1680000', 'es', 'Sistema de Sa√∫de Nacional da Guin√© Equatorial', 'Plan Nacional de Desarrollo del Sector Salud', 'Lista Nacional de Medicamentos']
        ];
        
        // Limpar dados existentes
        await connection.execute('DELETE FROM cplp_countries');
        
        let paisesInseridos = 0;
        for (const pais of paisesCPLP) {
            try {
                await connection.execute(
                    'INSERT INTO cplp_countries (code, name, name_pt, flag_emoji, population, language, health_system, rare_disease_policy, orphan_drugs_program) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
                    pais
                );
                console.log(`‚úÖ ${pais[3]} ${pais[1]}: ${parseInt(pais[4]).toLocaleString()} hab`);
                paisesInseridos++;
            } catch (error) {
                console.log(`‚ùå Erro ${pais[1]}: ${error.message}`);
            }
        }
        
        // Inserir HPO Terms
        console.log('\nüß¨ Inserindo HPO Terms...');
        
        const hpoTerms = [
            ['HP:0000001', 'All', 'Root of all terms in the Human Phenotype Ontology.', 'Todos', 'Raiz de todos os termos na Ontologia de Fen√≥tipos Humanos.'],
            ['HP:0000118', 'Phenotypic abnormality', 'A phenotypic abnormality.', 'Anormalidade fenot√≠pica', 'Uma anormalidade fenot√≠pica.'],
            ['HP:0001507', 'Growth abnormality', 'A deviation from the normal rate of growth.', 'Anormalidade de crescimento', 'Um desvio da taxa normal de crescimento.'],
            ['HP:0000478', 'Abnormality of the eye', 'Any abnormality of the eye, including location, spacing, and intraocular abnormalities.', 'Anormalidade do olho', 'Qualquer anormalidade do olho, incluindo localiza√ß√£o, espa√ßamento e anormalidades intraoculares.'],
            ['HP:0000707', 'Abnormality of the nervous system', 'An abnormality of the nervous system.', 'Anormalidade do sistema nervoso', 'Uma anormalidade do sistema nervoso.']
        ];
        
        // Limpar dados existentes
        await connection.execute('DELETE FROM hpo_terms');
        
        let hpoInseridos = 0;
        for (const termo of hpoTerms) {
            try {
                await connection.execute(
                    'INSERT INTO hpo_terms (hpo_id, name, definition, name_pt, definition_pt) VALUES (?, ?, ?, ?, ?)',
                    termo
                );
                console.log(`‚úÖ ${termo[0]}: ${termo[1]}`);
                hpoInseridos++;
            } catch (error) {
                console.log(`‚ùå Erro HPO ${termo[0]}: ${error.message}`);
            }
        }
        
        // Inserir Doen√ßas Raras
        console.log('\nüî¨ Inserindo Doen√ßas Raras...');
        
        const doencas = [
            ['ORPHA:558', 'Marfan syndrome', 'S√≠ndrome de Marfan', 'A systemic disorder of connective tissue characterized by abnormalities of the eyes, skeleton, and cardiovascular system.', 'Um dist√∫rbio sist√™mico do tecido conjuntivo caracterizado por anormalidades dos olhos, esqueleto e sistema cardiovascular.', '1:5000', 'Autosomal dominant', 'All ages'],
            ['ORPHA:773', 'Neurofibromatosis type 1', 'Neurofibromatose tipo 1', 'A tumor predisposition syndrome characterized by the development of neurofibromas.', 'Uma s√≠ndrome de predisposi√ß√£o tumoral caracterizada pelo desenvolvimento de neurofibromas.', '1:3000', 'Autosomal dominant', 'Childhood'],
            ['ORPHA:586', 'Ehlers-Danlos syndrome', 'S√≠ndrome de Ehlers-Danlos', 'A heterogeneous group of heritable connective tissue disorders.', 'Um grupo heterog√™neo de dist√∫rbios heredit√°rios do tecido conjuntivo.', '1:5000', 'Various', 'All ages'],
            ['ORPHA:550', 'Duchenne muscular dystrophy', 'Distrofia muscular de Duchenne', 'A severe X-linked recessive neuromuscular disorder.', 'Um dist√∫rbio neuromuscular recessivo ligado ao X severo.', '1:3500 male births', 'X-linked recessive', 'Early childhood'],
            ['ORPHA:352', 'Cystic fibrosis', 'Fibrose c√≠stica', 'A multisystem disorder affecting the respiratory and digestive systems.', 'Um dist√∫rbio multissist√™mico que afeta os sistemas respirat√≥rio e digestivo.', '1:2500-3500', 'Autosomal recessive', 'Neonatal/infantile']
        ];
        
        // Limpar dados existentes
        await connection.execute('DELETE FROM rare_diseases');
        
        let doencasInseridas = 0;
        for (const doenca of doencas) {
            try {
                await connection.execute(
                    'INSERT INTO rare_diseases (orphacode, name, name_pt, definition, definition_pt, prevalence, inheritance, age_onset) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                    doenca
                );
                console.log(`‚úÖ ${doenca[0]}: ${doenca[2] || doenca[1]}`);
                doencasInseridas++;
            } catch (error) {
                console.log(`‚ùå Erro doen√ßa ${doenca[0]}: ${error.message}`);
            }
        }
        
        // Verificar totais
        console.log('\nüìä VERIFICA√á√ÉO FINAL:');
        console.log('‚îÄ'.repeat(30));
        
        const [countPaises] = await connection.execute('SELECT COUNT(*) as total FROM cplp_countries');
        const [countHPO] = await connection.execute('SELECT COUNT(*) as total FROM hpo_terms');
        const [countDoencas] = await connection.execute('SELECT COUNT(*) as total FROM rare_diseases');
        
        console.log(`üåç Pa√≠ses CPLP: ${countPaises[0].total}`);
        console.log(`üß¨ HPO Terms: ${countHPO[0].total}`);
        console.log(`üî¨ Doen√ßas Raras: ${countDoencas[0].total}`);
        console.log(`üìà Total: ${countPaises[0].total + countHPO[0].total + countDoencas[0].total} registros`);
        
        // Calcular popula√ß√£o total
        const [popResult] = await connection.execute('SELECT SUM(CAST(population AS UNSIGNED)) as total_pop FROM cplp_countries');
        console.log(`\nüåê Popula√ß√£o total CPLP: ${parseInt(popResult[0].total_pop).toLocaleString()} habitantes`);
        
        console.log('\nüéâ MYSQL LOCAL CONFIGURADO E POPULADO!');
        console.log('‚ïê'.repeat(50));
        console.log('‚úÖ Database cplp_raras criado');
        console.log('‚úÖ Tabelas estruturadas');
        console.log('‚úÖ Dados CPLP inseridos');
        console.log('‚úÖ Pronto para sincroniza√ß√£o');
        
        console.log('\nüîó INFORMA√á√ïES DE CONEX√ÉO:');
        console.log('‚îÄ'.repeat(35));
        console.log('‚Ä¢ Host: localhost');
        console.log('‚Ä¢ Port: 3306');
        console.log('‚Ä¢ Database: cplp_raras');
        console.log('‚Ä¢ User: root');
        console.log('‚Ä¢ Password: root123');
        
    } catch (error) {
        console.error('‚ùå Erro na configura√ß√£o MySQL:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° SOLU√á√ïES:');
            console.log('1. Verificar se MySQL est√° rodando:');
            console.log('   net start mysql80');
            console.log('2. Ou iniciar servi√ßos MySQL no painel de controle');
            console.log('3. Ou verificar se a senha est√° correta');
        }
        
    } finally {
        if (connection) {
            await connection.end();
            console.log('\nüîê MySQL desconectado');
        }
    }
}

configurarMySQLLocal();
