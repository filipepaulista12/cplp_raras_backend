// =====================================================================================
// CONFIGURAÇÃO PRISMA PARA O SISTEMA GARD BRASILEIRO
// =====================================================================================
// Schema Prisma baseado no SQL schema criado
// Preparado para PostgreSQL com extensões necessárias
// =====================================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =====================================================================================
// 1. TABELAS DE REFERÊNCIA
// =====================================================================================

model DiseaseCategory {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(50)
  namePt      String   @map("name_pt") @db.VarChar(200)
  nameEn      String   @map("name_en") @db.VarChar(200)
  description String?
  colorHex    String?  @map("color_hex") @db.VarChar(7)
  icon        String?  @db.VarChar(50)
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  diseases Disease[]

  @@map("disease_categories")
}

model CPLPCountry {
  id                  Int      @id @default(autoincrement())
  code                String   @unique @db.VarChar(3)
  name                String   @db.VarChar(100)
  flagEmoji           String?  @map("flag_emoji") @db.VarChar(10)
  population          BigInt?
  healthcareSystem    String?  @map("healthcare_system")
  rareDiseasePolicy   String?  @map("rare_disease_policy")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relacionamentos
  supportOrganizations DiseaseSupportOrganization[]
  specialists          DiseaseSpecialist[]
  epidemiology         DiseaseEpidemiologyCPLP[]
  medicationsAvail     DiseaseMedicationsAvailability[]

  @@map("cplp_countries")
}

model InheritancePattern {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(50)
  namePt      String   @map("name_pt") @db.VarChar(100)
  nameEn      String   @map("name_en") @db.VarChar(100)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relacionamentos
  diseases Disease[]

  @@map("inheritance_patterns")
}

// =====================================================================================
// 2. ENUMS - Comentados para SQLite, usaremos strings
// =====================================================================================

// enum InfoStatus {
//   draft
//   under_review
//   reviewed
//   published
//   needs_update
//   archived
//   @@map("info_status")
// }

// enum PrevalenceType {
//   point
//   birth
//   lifetime
//   unknown
//   @@map("prevalence_type")
// }

// enum DataQuality {
//   high
//   medium
//   low
//   estimated
//   @@map("data_quality")
// }

// enum AvailabilityStatus {
//   available
//   restricted
//   unavailable
//   unknown
//   @@map("availability_status")
// }

// =====================================================================================
// 3. TABELA PRINCIPAL - DOENÇAS
// =====================================================================================

model Disease {
  id                      String            @id @default(uuid())
  gardBrId                String            @unique @map("gard_br_id")
  gardOriginalId          String?           @map("gard_original_id")

  // Identificação
  namePt                  String            @map("name_pt")
  nameEn                  String?           @map("name_en")
  synonyms                String            // JSON string for SQLite

  // Classificação
  categoryId              Int?              @map("category_id")
  category                DiseaseCategory?  @relation(fields: [categoryId], references: [id])
  subcategory             String?

  // Códigos de referência
  orphaCode               String?           @map("orpha_code")
  icd10Codes              String            @map("icd10_codes") // JSON string
  icd11Codes              String            @map("icd11_codes") // JSON string
  omimCodes               String            @map("omim_codes")  // JSON string

  // Informações epidemiológicas
  prevalenceValue         String?           @map("prevalence_value")
  prevalenceType          String            @default("point") @map("prevalence_type") // Changed from enum
  ageOfOnset              String?           @map("age_of_onset")

  // Genética
  inheritancePatternId    Int?              @map("inheritance_pattern_id")
  inheritancePattern      InheritancePattern? @relation(fields: [inheritancePatternId], references: [id])
  genesInvolved           String            @map("genes_involved") // JSON string
  chromosomalLocation     String?           @map("chromosomal_location")

  // Metadados
  infoStatus              String            @default("draft") @map("info_status") // Changed from enum
  qualityScore            Int               @default(0) @map("quality_score")
  lastMedicalReview       String?           @map("last_medical_review") // DATE as string
  nextReviewDue           String?           @map("next_review_due")     // DATE as string

  // Auditoria
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  createdBy               String?           @map("created_by")
  updatedBy               String?           @map("updated_by")

  // Relacionamentos
  content                 DiseaseContent?
  clinicalTrials          DiseaseClinicalTrial[]
  supportOrganizations    DiseaseSupportOrganization[]
  publications            DiseasePublication[]
  specialists             DiseaseSpecialist[]
  epidemiology            DiseaseEpidemiologyCPLP[]
  medicationsAvailability DiseaseMedicationsAvailability[]
  references              DiseaseReference[]
  auditLogs               DiseaseAuditLog[]

  @@map("diseases")
}

// =====================================================================================
// 4. CONTEÚDO DETALHADO
// =====================================================================================

model DiseaseContent {
  id                      String   @id @default(uuid()) @db.Uuid
  diseaseId               String   @unique @map("disease_id") @db.Uuid
  disease                 Disease  @relation(fields: [diseaseId], references: [id], onDelete: Cascade)

  // Conteúdo principal
  summary                 String?
  detailedDescription     String?  @map("detailed_description")

  // Seções estruturadas
  symptoms                String[]
  signs                   String[]
  causes                  String?
  pathophysiology         String?

  // Diagnóstico
  diagnosticCriteria      String[] @map("diagnostic_criteria")
  diagnosticTests         String[] @map("diagnostic_tests")
  differentialDiagnosis   String[] @map("differential_diagnosis")

  // Tratamento
  treatmentOptions        String[] @map("treatment_options")
  managementGuidelines    String?  @map("management_guidelines")
  medications             String[]
  therapies               String[]

  // Prognóstico
  prognosis               String?
  lifeExpectancy          String?  @map("life_expectancy") @db.VarChar(200)
  qualityOfLifeImpact     String?  @map("quality_of_life_impact")

  // Recursos
  patientResources        String[] @map("patient_resources")
  familyResources         String[] @map("family_resources")
  professionalResources   String[] @map("professional_resources")

  // Metadados
  contentVersion          Int      @default(1) @map("content_version")
  languageCode            String   @default("pt-BR") @map("language_code") @db.VarChar(5)
  medicalReviewer         String?  @map("medical_reviewer") @db.VarChar(200)
  reviewedAt              DateTime? @map("reviewed_at")

  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("disease_content")
}

// =====================================================================================
// 5. RELACIONAMENTOS E ASSOCIAÇÕES
// =====================================================================================

model DiseaseClinicalTrial {
  id                    String    @id @default(uuid()) @db.Uuid
  diseaseId             String    @map("disease_id") @db.Uuid
  disease               Disease   @relation(fields: [diseaseId], references: [id], onDelete: Cascade)

  trialId               String    @map("trial_id") @db.VarChar(50)
  title                 String    @db.VarChar(500)
  description           String?
  status                String    @db.VarChar(50)
  phase                 String?   @db.VarChar(20)
  location              String?   @db.VarChar(200)
  countryCode           String?   @map("country_code") @db.VarChar(3)
  contactInfo           String?   @map("contact_info")

  startDate             DateTime? @map("start_date") @db.Date
  estimatedCompletion   DateTime? @map("estimated_completion") @db.Date
  lastUpdated           DateTime  @default(now()) @map("last_updated")

  source                String?   @db.VarChar(100)
  sourceUrl             String?   @map("source_url")

  @@map("disease_clinical_trials")
}

model DiseaseSupportOrganization {
  id                    String       @id @default(uuid()) @db.Uuid
  diseaseId             String       @map("disease_id") @db.Uuid
  disease               Disease      @relation(fields: [diseaseId], references: [id], onDelete: Cascade)

  name                  String       @db.VarChar(300)
  description           String?
  organizationType      String       @map("organization_type") @db.VarChar(100)

  contactInfo           Json?        @map("contact_info")
  website               String?
  socialMedia           Json?        @map("social_media")

  countryId             Int?         @map("country_id")
  country               CPLPCountry? @relation(fields: [countryId], references: [id])
  languages             String[]     @db.VarChar(10)

  servicesOffered       String[]     @map("services_offered")
  targetAudience        String?      @map("target_audience") @db.VarChar(100)

  verified              Boolean      @default(false)
  lastVerified          DateTime?    @map("last_verified") @db.Date

  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")

  @@map("disease_support_organizations")
}

model DiseasePublication {
  id                    String    @id @default(uuid()) @db.Uuid
  diseaseId             String    @map("disease_id") @db.Uuid
  disease               Disease   @relation(fields: [diseaseId], references: [id], onDelete: Cascade)

  pubmedId              String?   @map("pubmed_id") @db.VarChar(20)
  doi                   String?   @db.VarChar(200)
  title                 String    @db.VarChar(1000)
  authors               String[]
  journal               String?   @db.VarChar(300)
  publicationDate       DateTime? @map("publication_date") @db.Date
  abstract              String?

  studyType             String?   @map("study_type") @db.VarChar(100)
  evidenceLevel         Int?      @map("evidence_level")
  languageCode          String?   @map("language_code") @db.VarChar(5)

  isOpenAccess          Boolean   @default(false) @map("is_open_access")
  fullTextUrl           String?   @map("full_text_url")

  createdAt             DateTime  @default(now()) @map("created_at")

  @@map("disease_publications")
}

model DiseaseSpecialist {
  id                    String       @id @default(uuid()) @db.Uuid
  diseaseId             String       @map("disease_id") @db.Uuid
  disease               Disease      @relation(fields: [diseaseId], references: [id], onDelete: Cascade)

  specialistType        String       @map("specialist_type") @db.VarChar(100)
  name                  String       @db.VarChar(300)
  specialty             String?      @db.VarChar(200)

  contactInfo           Json?        @map("contact_info")
  address               Json?
  countryId             Int?         @map("country_id")
  country               CPLPCountry? @relation(fields: [countryId], references: [id])

  acceptsNewPatients    Boolean      @default(true) @map("accepts_new_patients")
  languages             String[]     @db.VarChar(10)
  telemedicineAvailable Boolean      @default(false) @map("telemedicine_available")

  verificationStatus    String       @default("pending") @map("verification_status") @db.VarChar(50)
  verifiedBy            String?      @map("verified_by") @db.VarChar(200)
  verifiedAt            DateTime?    @map("verified_at")

  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")

  @@map("disease_specialists")
}

// =====================================================================================
// 6. DADOS REGIONAIS CPLP
// =====================================================================================

model DiseaseEpidemiologyCPLP {
  id                    String       @id @default(uuid()) @db.Uuid
  diseaseId             String       @map("disease_id") @db.Uuid
  disease               Disease      @relation(fields: [diseaseId], references: [id], onDelete: Cascade)
  countryId             Int          @map("country_id")
  country               CPLPCountry  @relation(fields: [countryId], references: [id])

  estimatedCases        Int?         @map("estimated_cases")
  prevalencePer100k     Decimal?     @map("prevalence_per_100k") @db.Decimal(10, 4)
  incidencePer100kYear  Decimal?     @map("incidence_per_100k_year") @db.Decimal(10, 4)

  dataSource            String?      @map("data_source")
  dataQuality           String?      @map("data_quality") // Changed from enum
  collectionDate        String?      @map("collection_date") // DATE as string

  notes                 String?

  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")

  @@map("disease_epidemiology_cplp")
}

model DiseaseMedicationsAvailability {
  id                      String             @id @default(uuid()) @db.Uuid
  diseaseId               String             @map("disease_id") @db.Uuid
  disease                 Disease            @relation(fields: [diseaseId], references: [id], onDelete: Cascade)
  countryId               Int                @map("country_id")
  country                 CPLPCountry        @relation(fields: [countryId], references: [id])

  medicationName          String             @map("medication_name") @db.VarChar(300)
  genericName             String?            @map("generic_name") @db.VarChar(300)

  availabilityStatus      String       @map("availability_status") // Changed from enum
  regulatoryStatus        String?            @map("regulatory_status") @db.VarChar(100)
  reimbursementStatus     String?            @map("reimbursement_status") @db.VarChar(100)

  costInfo                String?            @map("cost_info")
  accessConditions        String[]           @map("access_conditions")
  prescriptionRequirements String[]          @map("prescription_requirements")

  lastUpdated             DateTime           @default(now()) @map("last_updated")
  dataSource              String?            @map("data_source") @db.VarChar(200)

  @@map("disease_medications_availability")
}

// =====================================================================================
// 7. AUDITORIA E REFERÊNCIAS
// =====================================================================================

model DiseaseAuditLog {
  id            String   @id @default(uuid()) @db.Uuid
  diseaseId     String   @map("disease_id") @db.Uuid
  disease       Disease  @relation(fields: [diseaseId], references: [id], onDelete: Cascade)

  action        String   @db.VarChar(50)
  tableAffected String   @map("table_affected") @db.VarChar(100)
  oldValues     Json?    @map("old_values")
  newValues     Json?    @map("new_values")

  changedBy     String?  @map("changed_by") @db.Uuid
  changedAt     DateTime @default(now()) @map("changed_at")
  changeReason  String?  @map("change_reason")

  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")

  @@map("disease_audit_log")
}

model DiseaseReference {
  id              String    @id @default(uuid()) @db.Uuid
  diseaseId       String    @map("disease_id") @db.Uuid
  disease         Disease   @relation(fields: [diseaseId], references: [id], onDelete: Cascade)

  referenceType   String    @map("reference_type") @db.VarChar(50)
  title           String    @db.VarChar(500)
  authors         String[]
  source          String?   @db.VarChar(300)
  url             String?
  publicationDate DateTime? @map("publication_date") @db.Date
  accessDate      DateTime? @map("access_date") @db.Date

  reliabilityScore Int?     @map("reliability_score")
  notes           String?

  createdAt       DateTime  @default(now()) @map("created_at")

  @@map("disease_references")
}
