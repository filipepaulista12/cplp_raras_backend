/**
 * AUDITORIA COMPLETA - FASE 1
 * Identifica√ß√£o de dados incompletos vs dados completos
 */

const mysql = require('mysql2/promise');
const fs = require('fs');

async function auditoriaCompletaFase1() {
    let connection;
    
    try {
        console.log('üîç AUDITORIA COMPLETA - AN√ÅLISE DE DADOS FASE 1');
        console.log('=' .repeat(70));
        
        // Conectar MySQL
        connection = await mysql.createConnection({
            host: 'localhost',
            port: 3306,
            user: 'root',
            password: '',
            database: 'cplp_raras'
        });
        
        const auditoria = {
            data_auditoria: new Date().toISOString(),
            problemas_identificados: [],
            dados_completos: [],
            dados_incompletos: [],
            recomendacoes: []
        };
        
        // 1. AN√ÅLISE ORPHANET - DEVERIA TER DADOS MASSIVOS
        console.log('ü¶† 1. AUDITORIA ORPHANET...');
        const [orphaStats] = await connection.execute(`
            SELECT 
                (SELECT COUNT(*) FROM orpha_diseases) as diseases,
                (SELECT COUNT(*) FROM orpha_clinical_signs) as clinical_signs,
                (SELECT COUNT(*) FROM orpha_epidemiology) as epidemiology,
                (SELECT COUNT(*) FROM orpha_phenotypes) as phenotypes,
                (SELECT COUNT(*) FROM orpha_gene_associations) as gene_associations,
                (SELECT COUNT(*) FROM orpha_natural_history) as natural_history,
                (SELECT COUNT(*) FROM orpha_textual_information) as textual_info,
                (SELECT COUNT(*) FROM orpha_cplp_epidemiology) as cplp_epidemiology
        `);
        
        const orphaData = orphaStats[0];
        console.log(`   üìä Doen√ßas: ${orphaData.diseases.toLocaleString()}`);
        console.log(`   üìä Sinais cl√≠nicos: ${orphaData.clinical_signs.toLocaleString()}`);
        console.log(`   üìä Epidemiologia: ${orphaData.epidemiology.toLocaleString()}`);
        console.log(`   üìä Fen√≥tipos: ${orphaData.phenotypes.toLocaleString()}`);
        console.log(`   üìä Associa√ß√µes gen√©ticas: ${orphaData.gene_associations.toLocaleString()}`);
        console.log(`   üìä Hist√≥ria natural: ${orphaData.natural_history.toLocaleString()}`);
        console.log(`   üìä Informa√ß√µes textuais: ${orphaData.textual_info.toLocaleString()}`);
        console.log(`   üìä Epidemiologia CPLP: ${orphaData.cplp_epidemiology.toLocaleString()}`);
        
        // PROBLEMA IDENTIFICADO: Muitas tabelas Orphanet est√£o vazias!
        if (orphaData.clinical_signs === 0) {
            auditoria.problemas_identificados.push({
                componente: 'Orphanet Clinical Signs',
                problema: 'Tabela completamente vazia - dados n√£o foram carregados',
                impacto: 'Alto - perda de informa√ß√µes cl√≠nicas essenciais',
                registros_esperados: '50,000+',
                registros_atuais: 0
            });
        }
        
        if (orphaData.epidemiology === 0) {
            auditoria.problemas_identificados.push({
                componente: 'Orphanet Epidemiology',
                problema: 'Dados epidemiol√≥gicos n√£o carregados',
                impacto: 'Alto - sem dados de preval√™ncia e incid√™ncia',
                registros_esperados: '20,000+',
                registros_atuais: 0
            });
        }
        
        if (orphaData.phenotypes === 0) {
            auditoria.problemas_identificados.push({
                componente: 'Orphanet Phenotypes',
                problema: 'Fen√≥tipos n√£o carregados da API Orphanet',
                impacto: 'Cr√≠tico - sem associa√ß√µes fen√≥tipo-doen√ßa',
                registros_esperados: '100,000+',
                registros_atuais: 0
            });
        }
        
        // 2. AN√ÅLISE HPO - DEVERIA TER MAIS ASSOCIA√á√ïES
        console.log('\nüß¨ 2. AUDITORIA HPO...');
        const [hpoStats] = await connection.execute(`
            SELECT 
                (SELECT COUNT(*) FROM hpo_terms) as terms,
                (SELECT COUNT(*) FROM hpo_disease_associations) as disease_assoc,
                (SELECT COUNT(*) FROM hpo_gene_associations) as gene_assoc,
                (SELECT COUNT(*) FROM hpo_phenotype_associations) as phenotype_assoc
        `);
        
        const hpoData = hpoStats[0];
        console.log(`   üß¨ Termos HPO: ${hpoData.terms.toLocaleString()}`);
        console.log(`   üîó Associa√ß√µes doen√ßa: ${hpoData.disease_assoc.toLocaleString()}`);
        console.log(`   üîó Associa√ß√µes gene: ${hpoData.gene_assoc.toLocaleString()}`);
        console.log(`   üîó Associa√ß√µes fen√≥tipo: ${hpoData.phenotype_assoc.toLocaleString()}`);
        
        // HPO parece ter dados bons, mas verificar se s√£o completos
        if (hpoData.phenotype_assoc === 0) {
            auditoria.problemas_identificados.push({
                componente: 'HPO Phenotype Associations',
                problema: 'Associa√ß√µes fen√≥tipo-HPO n√£o carregadas',
                impacto: 'M√©dio - reduz capacidade de busca por fen√≥tipos',
                registros_esperados: '200,000+',
                registros_atuais: 0
            });
        }
        
        // 3. AN√ÅLISE CLINVAR - MUITO PEQUENO!
        console.log('\nüß™ 3. AUDITORIA CLINVAR...');
        const [clinvarStats] = await connection.execute(`
            SELECT 
                (SELECT COUNT(*) FROM clinvar_variants) as variants,
                (SELECT COUNT(*) FROM clinvar_genes) as genes,
                (SELECT COUNT(*) FROM clinvar_submissions) as submissions,
                (SELECT COUNT(*) FROM clinvar_hpo_associations) as hpo_assoc
        `);
        
        const clinvarData = clinvarStats[0];
        console.log(`   üß™ Variantes: ${clinvarData.variants.toLocaleString()}`);
        console.log(`   üß¨ Genes: ${clinvarData.genes.toLocaleString()}`);
        console.log(`   üìù Submissions: ${clinvarData.submissions.toLocaleString()}`);
        console.log(`   üîó Associa√ß√µes HPO: ${clinvarData.hpo_assoc.toLocaleString()}`);
        
        // PROBLEMA CR√çTICO: ClinVar tem apenas 100 variantes!
        auditoria.problemas_identificados.push({
            componente: 'ClinVar Variants',
            problema: 'CR√çTICO - Apenas 100 variantes carregadas (deveria ter 1M+)',
            impacto: 'Cr√≠tico - base gen√¥mica insuficiente',
            registros_esperados: '1,000,000+',
            registros_atuais: clinvarData.variants,
            solucao: 'Implementar download completo da API ClinVar'
        });
        
        if (clinvarData.hpo_assoc === 0) {
            auditoria.problemas_identificados.push({
                componente: 'ClinVar HPO Associations',
                problema: 'Associa√ß√µes ClinVar-HPO n√£o estabelecidas',
                impacto: 'Alto - sem integra√ß√£o fen√≥tipo-gen√≥tipo',
                registros_esperados: '500,000+',
                registros_atuais: 0
            });
        }
        
        // 4. AN√ÅLISE OMIM - MUITO PEQUENO!
        console.log('\nüìä 4. AUDITORIA OMIM...');
        const [omimStats] = await connection.execute(`
            SELECT 
                (SELECT COUNT(*) FROM omim_entries) as entries,
                (SELECT COUNT(*) FROM omim_phenotypes) as phenotypes,
                (SELECT COUNT(*) FROM omim_external_mappings) as mappings,
                (SELECT COUNT(*) FROM omim_hpo_associations) as hpo_assoc
        `);
        
        const omimData = omimStats[0];
        console.log(`   üìä Entradas: ${omimData.entries.toLocaleString()}`);
        console.log(`   üìä Fen√≥tipos: ${omimData.phenotypes.toLocaleString()}`);
        console.log(`   üîó Mapeamentos: ${omimData.mappings.toLocaleString()}`);
        console.log(`   üîó Associa√ß√µes HPO: ${omimData.hpo_assoc.toLocaleString()}`);
        
        // PROBLEMA CR√çTICO: OMIM tem apenas 50 entradas!
        auditoria.problemas_identificados.push({
            componente: 'OMIM Entries',
            problema: 'CR√çTICO - Apenas 50 entradas OMIM (deveria ter 25K+)',
            impacto: 'Cr√≠tico - cobertura gen√¥mica insuficiente',
            registros_esperados: '25,000+',
            registros_atuais: omimData.entries,
            solucao: 'Implementar acesso completo √† API OMIM'
        });
        
        if (omimData.hpo_assoc === 0) {
            auditoria.problemas_identificados.push({
                componente: 'OMIM HPO Associations',
                problema: 'Associa√ß√µes OMIM-HPO n√£o estabelecidas',
                impacto: 'Alto - sem linking gen√≥tipo-fen√≥tipo',
                registros_esperados: '100,000+',
                registros_atuais: 0
            });
        }
        
        // 5. AN√ÅLISE DRUGBANK - PARECE OK
        console.log('\nüíä 5. AUDITORIA DRUGBANK...');
        const [drugStats] = await connection.execute(`
            SELECT 
                (SELECT COUNT(*) FROM drugbank_drugs) as drugs,
                (SELECT COUNT(*) FROM drug_disease_associations) as disease_assoc,
                (SELECT COUNT(*) FROM drug_interactions) as interactions
        `);
        
        const drugData = drugStats[0];
        console.log(`   üíä Medicamentos: ${drugData.drugs.toLocaleString()}`);
        console.log(`   üîó Associa√ß√µes doen√ßa: ${drugData.disease_assoc.toLocaleString()}`);
        console.log(`   ‚ö†Ô∏è Intera√ß√µes: ${drugData.interactions.toLocaleString()}`);
        
        if (drugData.disease_assoc === 0) {
            auditoria.problemas_identificados.push({
                componente: 'Drug Disease Associations',
                problema: 'Associa√ß√µes medicamento-doen√ßa n√£o carregadas',
                impacto: 'Alto - sem recomenda√ß√µes terap√™uticas',
                registros_esperados: '50,000+',
                registros_atuais: 0
            });
        }
        
        // 6. IDENTIFICAR DADOS QUE EST√ÉO COMPLETOS
        if (orphaData.diseases > 10000) {
            auditoria.dados_completos.push({
                componente: 'Orphanet Diseases',
                status: 'COMPLETO',
                registros: orphaData.diseases,
                qualidade: 'Boa'
            });
        }
        
        if (hpoData.terms > 15000) {
            auditoria.dados_completos.push({
                componente: 'HPO Terms',
                status: 'COMPLETO',
                registros: hpoData.terms,
                qualidade: 'Excelente'
            });
        }
        
        if (hpoData.disease_assoc > 40000) {
            auditoria.dados_completos.push({
                componente: 'HPO Disease Associations',
                status: 'COMPLETO',
                registros: hpoData.disease_assoc,
                qualidade: 'Excelente'
            });
        }
        
        // 7. GERAR RECOMENDA√á√ïES
        console.log('\nüéØ 6. RECOMENDA√á√ïES CR√çTICAS...');
        
        auditoria.recomendacoes = [
            {
                prioridade: 'CR√çTICA',
                acao: 'Implementar download completo ClinVar',
                detalhes: 'Configurar acesso √† API oficial ClinVar para obter 1M+ variantes',
                impacto: 'Fundamental para credibilidade da base gen√¥mica',
                tempo_estimado: '2-3 dias'
            },
            {
                prioridade: 'CR√çTICA',
                acao: 'Implementar acesso completo OMIM',
                detalhes: 'Configurar licen√ßa e API OMIM para obter 25K+ entradas',
                impacto: 'Essencial para cobertura gen√¥mica completa',
                tempo_estimado: '3-5 dias'
            },
            {
                prioridade: 'ALTA',
                acao: 'Completar dados Orphanet',
                detalhes: 'Carregar fen√≥tipos, epidemiologia e sinais cl√≠nicos',
                impacto: 'Melhora significativa da qualidade cl√≠nica',
                tempo_estimado: '1-2 dias'
            },
            {
                prioridade: 'ALTA',
                acao: 'Estabelecer associa√ß√µes HPO',
                detalhes: 'Criar links ClinVar-HPO e OMIM-HPO para integra√ß√£o',
                impacto: 'Habilita busca por fen√≥tipos',
                tempo_estimado: '1 dia'
            },
            {
                prioridade: 'M√âDIA',
                acao: 'Carregar associa√ß√µes medicamento-doen√ßa',
                detalhes: 'Completar dados DrugBank com indica√ß√µes terap√™uticas',
                impacto: 'Adiciona valor cl√≠nico significativo',
                tempo_estimado: '1 dia'
            }
        ];
        
        auditoria.recomendacoes.forEach((rec, index) => {
            console.log(`   ${index + 1}. [${rec.prioridade}] ${rec.acao}`);
            console.log(`      ‚Üí ${rec.detalhes}`);
            console.log(`      ‚Üí Impacto: ${rec.impacto}`);
            console.log(`      ‚Üí Tempo: ${rec.tempo_estimado}\n`);
        });
        
        // 8. RESUMO EXECUTIVO
        const problemasCount = auditoria.problemas_identificados.length;
        const completosCount = auditoria.dados_completos.length;
        
        console.log('=' .repeat(80));
        console.log('üìã RESUMO EXECUTIVO DA AUDITORIA');
        console.log('=' .repeat(80));
        console.log(`‚ùå PROBLEMAS IDENTIFICADOS: ${problemasCount}`);
        console.log(`‚úÖ COMPONENTES COMPLETOS: ${completosCount}`);
        console.log(`üéØ A√á√ïES RECOMENDADAS: ${auditoria.recomendacoes.length}`);
        
        console.log('\nüî• PROBLEMAS MAIS CR√çTICOS:');
        auditoria.problemas_identificados
            .filter(p => p.impacto === 'Cr√≠tico')
            .forEach(p => {
                console.log(`   ‚ùå ${p.componente}: ${p.problema}`);
            });
        
        console.log('\n‚úÖ COMPONENTES BEM IMPLEMENTADOS:');
        auditoria.dados_completos.forEach(d => {
            console.log(`   ‚úÖ ${d.componente}: ${d.registros.toLocaleString()} registros`);
        });
        
        // Salvar auditoria
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const reportPath = `relatorios/AUDITORIA-FASE1-COMPLETA-${timestamp}.json`;
        fs.writeFileSync(reportPath, JSON.stringify(auditoria, null, 2));
        
        console.log(`\nüìÑ Relat√≥rio completo salvo em: ${reportPath}`);
        
        // Decis√£o final
        const criticosCount = auditoria.problemas_identificados.filter(p => p.impacto === 'Cr√≠tico').length;
        
        if (criticosCount > 0) {
            console.log('\nüö® CONCLUS√ÉO: FASE 1 PRECISA SER REFEITA COM DADOS COMPLETOS');
            console.log('üîÑ Recomendado: Implementar downloads completos antes de prosseguir para Fase 2');
        } else {
            console.log('\n‚úÖ CONCLUS√ÉO: Fase 1 adequada para prosseguir com otimiza√ß√µes');
        }
        
        return {
            problemas_criticos: criticosCount,
            total_problemas: problemasCount,
            componentes_ok: completosCount,
            relatorio: reportPath,
            precisa_refazer: criticosCount > 0
        };
        
    } catch (error) {
        console.error('‚ùå Erro na auditoria:', error.message);
        return { erro: error.message };
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

// Executar auditoria
auditoriaCompletaFase1()
    .then(result => {
        console.log('\nüîç AUDITORIA CONCLU√çDA!');
        if (result.precisa_refazer) {
            console.log('üö® A√á√ÉO NECESS√ÅRIA: Refazer Fase 1 com dados completos');
            console.log(`‚ùå Problemas cr√≠ticos: ${result.problemas_criticos}`);
        } else {
            console.log('‚úÖ Fase 1 pode ser otimizada e prosseguir');
        }
    })
    .catch(error => {
        console.error('\nüí• ERRO:', error.message);
    });
